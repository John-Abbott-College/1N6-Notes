<!DOCTYPE html>
<html lang="en"><head>
<link href="../../_assets/favicons/favicon.ico" rel="icon">
<script src="../../site_libs/clipboard/clipboard.min.js"></script>
<script src="../../site_libs/quarto-html/tabby.min.js"></script>
<script src="../../site_libs/quarto-html/popper.min.js"></script>
<script src="../../site_libs/quarto-html/tippy.umd.min.js"></script>
<link href="../../site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/light-border.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting-dark-befe23ebd2f54d8af2c8a89d1a1611f1.css" rel="stylesheet" id="quarto-text-highlighting-styles"><meta charset="utf-8">
  <meta name="generator" content="quarto-1.7.34">

  <meta name="dcterms.date" content="2025-09-28">
  <title>{{&lt; var course.title &gt;}} ‚Äì Understanding CPUs</title>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reset.css">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reveal.css">
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
      vertical-align: middle;
    }
    /* CSS for syntax highlighting */
    html { -webkit-text-size-adjust: 100%; }
    pre > code.sourceCode { white-space: pre; position: relative; }
    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
    pre > code.sourceCode > span:empty { height: 1.2em; }
    .sourceCode { overflow: visible; }
    code.sourceCode > span { color: inherit; text-decoration: inherit; }
    div.sourceCode { margin: 1em 0; }
    pre.sourceCode { margin: 0; }
    @media screen {
    div.sourceCode { overflow: auto; }
    }
    @media print {
    pre > code.sourceCode { white-space: pre-wrap; }
    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
    }
    pre.numberSource code
      { counter-reset: source-line 0; }
    pre.numberSource code > span
      { position: relative; left: -4em; counter-increment: source-line; }
    pre.numberSource code > span > a:first-child::before
      { content: counter(source-line);
        position: relative; left: -1em; text-align: right; vertical-align: baseline;
        border: none; display: inline-block;
        -webkit-touch-callout: none; -webkit-user-select: none;
        -khtml-user-select: none; -moz-user-select: none;
        -ms-user-select: none; user-select: none;
        padding: 0 4px; width: 4em;
      }
    pre.numberSource { margin-left: 3em;  padding-left: 4px; }
    div.sourceCode
      { color: #f8f8f2;  }
    @media screen {
    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
    }
    code span { color: #f8f8f2; } /* Normal */
    code span.al { color: #f07178; } /* Alert */
    code span.an { color: #d4d0ab; } /* Annotation */
    code span.at { color: #00e0e0; } /* Attribute */
    code span.bn { color: #d4d0ab; } /* BaseN */
    code span.bu { color: #abe338; } /* BuiltIn */
    code span.cf { color: #ffa07a; font-weight: bold; } /* ControlFlow */
    code span.ch { color: #abe338; } /* Char */
    code span.cn { color: #ffd700; } /* Constant */
    code span.co { color: #f8f8f2; font-style: italic; } /* Comment */
    code span.cv { color: #ffd700; } /* CommentVar */
    code span.do { color: #f8f8f2; } /* Documentation */
    code span.dt { color: #ffa07a; } /* DataType */
    code span.dv { color: #d4d0ab; } /* DecVal */
    code span.er { color: #f07178; text-decoration: underline; } /* Error */
    code span.ex { color: #00e0e0; font-weight: bold; } /* Extension */
    code span.fl { color: #d4d0ab; } /* Float */
    code span.fu { color: #ffa07a; } /* Function */
    code span.im { color: #abe338; } /* Import */
    code span.in { color: #d4d0ab; } /* Information */
    code span.kw { color: #ffa07a; font-weight: bold; } /* Keyword */
    code span.op { color: #ffa07a; } /* Operator */
    code span.ot { color: #00e0e0; } /* Other */
    code span.pp { color: #dcc6e0; } /* Preprocessor */
    code span.re { color: #00e0e0; background-color: #f8f8f2; } /* RegionMarker */
    code span.sc { color: #abe338; } /* SpecialChar */
    code span.ss { color: #abe338; } /* SpecialString */
    code span.st { color: #abe338; } /* String */
    code span.va { color: #00e0e0; } /* Variable */
    code span.vs { color: #abe338; } /* VerbatimString */
    code span.wa { color: #dcc6e0; } /* Warning */
  </style>
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/theme/quarto-0c8acc74dca0c2faaedea4940f202713.css">
  <link href="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/quarto-support/footer.css" rel="stylesheet">
  <style type="text/css">
    .reveal div.sourceCode {
      margin: 0;
      overflow: auto;
    }
    .reveal div.hanging-indent {
      margin-left: 1em;
      text-indent: -1em;
    }
    .reveal .slide:not(.center) {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide.scrollable {
      overflow-y: auto;
    }
    .reveal .footnotes {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide .absolute {
      position: absolute;
      display: block;
    }
    .reveal .footnotes ol {
      counter-reset: ol;
      list-style-type: none; 
      margin-left: 0;
    }
    .reveal .footnotes ol li:before {
      counter-increment: ol;
      content: counter(ol) ". "; 
    }
    .reveal .footnotes ol li > p:first-child {
      display: inline-block;
    }
    .reveal .slide ul,
    .reveal .slide ol {
      margin-bottom: 0.5em;
    }
    .reveal .slide ul li,
    .reveal .slide ol li {
      margin-top: 0.4em;
      margin-bottom: 0.2em;
    }
    .reveal .slide ul[role="tablist"] li {
      margin-bottom: 0;
    }
    .reveal .slide ul li > *:first-child,
    .reveal .slide ol li > *:first-child {
      margin-block-start: 0;
    }
    .reveal .slide ul li > *:last-child,
    .reveal .slide ol li > *:last-child {
      margin-block-end: 0;
    }
    .reveal .slide .columns:nth-child(3) {
      margin-block-start: 0.8em;
    }
    .reveal blockquote {
      box-shadow: none;
    }
    .reveal .tippy-content>* {
      margin-top: 0.2em;
      margin-bottom: 0.7em;
    }
    .reveal .tippy-content>*:last-child {
      margin-bottom: 0.2em;
    }
    .reveal .slide > img.stretch.quarto-figure-center,
    .reveal .slide > img.r-stretch.quarto-figure-center {
      display: block;
      margin-left: auto;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-left,
    .reveal .slide > img.r-stretch.quarto-figure-left  {
      display: block;
      margin-left: 0;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-right,
    .reveal .slide > img.r-stretch.quarto-figure-right  {
      display: block;
      margin-left: auto;
      margin-right: 0; 
    }
  </style>
<meta property="og:title" content="Understanding CPUs ‚Äì Technical Support">
<meta property="og:description" content="More detail on CPUs. ‚ÄúGuy in Box‚Äù analogy, Clock Speed, Codebook, Databuses explained.">
<meta property="og:image" content="https://John-Abbott-College.github.io/1N6-Notes/topics/hardware/_assets/favicons/favicon-32x32.png">
<meta property="og:site_name" content="{{< var course.title >}}">
</head>
<body class="quarto-dark">
  <div class="reveal">
    <div class="slides">

<section id="title-slide" class="quarto-title-block center">
  <h1 class="title">Understanding CPUs</h1>
  <p class="subtitle">More detail on CPUs. ‚ÄúGuy in Box‚Äù analogy, Clock Speed, Codebook, Databuses explained.</p>

<div class="quarto-title-authors">
</div>

  <p class="date">2025-09-28</p>
</section><section id="TOC">
<nav role="doc-toc"> 
<h2 id="toc-title">Table of contents</h2>
<ul>
<li><a href="#/cpu-manufacturers" id="/toc-cpu-manufacturers">CPU Manufacturers üè≠</a></li>
</ul>
</nav>
</section>
<section class="slide level2">


<img data-src="_assets/understanding-cpus16.png" title="A sample title." alt="Sample alt text. To be replaced!" class="r-stretch quarto-figure-center"><p class="caption">What if all computers contained some guy, trapped in a box? Something to consider. Image source: unknown</p></section>
<section id="introduction" class="slide level2">
<h2>Introduction</h2>
<p>Last week one component we learned was the <strong>CPU</strong> (<em>Central Processing Unit</em>): A complex collection of electronic circuits on one or more integrated circuits (chips).</p>
<p>We learned that the CPU is responsible for:</p>
<ul>
<li><em>Executing the instructions in a software program.</em></li>
<li>Communicating with other parts of the computer system</li>
</ul>
<p>Today we‚Äôre going to take a deep dive into <em>how</em> the CPU carries out those responsibilities.</p>
</section>
<section id="lesson-overview" class="slide level2">
<h2>Lesson Overview</h2>
<p>More detail on CPUs. ‚ÄúGuy in Box‚Äù analogy, Clock Speed, Codebook, data buses explained.</p>
</section>
<section id="cpu-analogy-guy-in-a-box" class="slide level2">
<h2>CPU Analogy: Guy in a Box üì¶</h2>
<p>Let‚Äôs start with an analogy: CPUs are a ‚ÄúGuy-in-a-box‚Äù. This guy:</p>
<ul>
<li>can perform any mathematical function quickly.</li>
<li>lives in a closed-up box so direct communication is impossible.</li>
</ul>
<p>Our only way of communicating with this guy is via the <strong>External Data Bus</strong>. This is 16 light bulbs: 8 visible inside the box, and 8 visible outside the box. There is a light switch for each pair (inside-outside) the box which allows us to flip both the inside and outside bulbs and hence send binary messages!</p>

<img data-src="_assets/understanding-cpus2.png" alt="Man in a box" class="r-stretch quarto-figure-center"><p class="caption">A man in a box analogy. Image source: unknown.</p></section>
<section class="slide level2">

<div class="column-margin">
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="_assets/understanding-cpus5.png" title="A sample title." alt="Sample alt text. To be replaced!"></p>
<figcaption>A sample caption. Image source: unknown.</figcaption>
</figure>
</div>
</div>
<h3 id="data-bus">Data bus üí°üí°üí°</h3>
<p>In this analogy this arrangement of light bulbs is called a <strong>data bus:</strong> a method for transporting data from one component to another using electrical circuits. These ‚Äúlight bulbs‚Äù: - can be controlled (turned on or off) by us and by the guy-in-the-box - are synchronized (bulb 1 for us has the same value as bulb 1 for the guy) - we can share messages by setting the light bulbs on off, as long as we: agree on schedule (not changing the lightbulbs at the same time) - the meaning (share the same interpretation of lightbulb being on/off)</p>
</section>
<section class="slide level2">

<h3 id="codebook-agreeing-on-meaning">Codebook: Agreeing on meaning üìñ</h3>
<p>How do we share the same meaning?</p>
<p>It‚Äôs important to have common definitions for the meaning of the lightbulbs being on/off to understand messages sent by this method CPUs are designed with a <strong>codebook</strong> (instruction set) that defines the commands that we can give to the guy in the box. This codebook is built into each CPU by its manufacturer and is called ‚Äúmachine code‚Äù.</p>

<img data-src="_assets/understanding-cpus10.png" title="A sample title." alt="Sample alt text. To be replaced!" class="r-stretch quarto-figure-center"><p class="caption">Every pair of light bulbs is matching and can be controlled from the inside by the CPU or from the outside by the program executing instructions on the CPU.</p><div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Note</strong></p>
</div>
<div class="callout-content">
<p>If CPUs only understand machine code (sequence of 1 or 0), how can this C# code be understood by it?</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode numberSource csharp number-lines code-with-copy"><code class="sourceCode cs"><span id="cb1-1"><a></a>Console<span class="op">.</span><span class="fu">WriteLine</span><span class="op">(</span><span class="st">"Hello World!"</span><span class="op">);</span> </span></code><button title="Copy to Clipboard" class="code-copy-button"><i class="bi"></i></button></pre></div>
</div>
</div>
</div>
</section>
<section class="slide level2">

<h3 id="registers">Registers</h3>
<p>So far, we can send/receive ‚Äúmessages‚Äù from the light bulbs. But, in order to ‚Äúremember‚Äù a message, the guy needs at least a few workstations ( <strong>registers</strong> ) to copy our messages, otherwise the messages will be lost every time the data bus updates.</p>
<ul>
<li><strong>Registers</strong> are places to store a very small amount of data temporarily</li>
<li>Registers are usually the around the 1-4x the size of the data bus</li>
<li>We can give the registers names to distinguish them (AX, BX, CX, DX for example)</li>
</ul>

<img data-src="_assets/understanding-cpus8.png" title="A sample title." alt="Sample alt text. To be replaced!" class="r-stretch quarto-figure-center"><p class="caption">Analogy of the registers acting as workstations. Image source: unknown.</p><div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Note</strong></p>
</div>
<div class="callout-content">
<p>Are CPU registers made of the same technology as RAM?</p>
</div>
</div>
</div>
</section>
<section class="slide level2">

<h3 id="clock-agreeing-on-schedule">Clock: Agreeing on schedule ‚è∞</h3>
<p>Now we are ready to communicate with the guy in the box. We can send them the first command by lighting up the bulbs on the data bus.</p>
<p>But how do they know when we have finished setting up the light bulbs?</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="_assets/understanding-cpus16.png" title="A sample title." alt="Sample alt text. To be replaced!"></p>
<figcaption>Clock analogy. Image source: unknown.</figcaption>
</figure>
</div>
<ul>
<li>We can use a bell activated by a button.</li>
<li>A real computer uses a special wire called the clock wire (CLK). The CLK wire is turned on and off on a precise and regular schedule. This is called a <strong>clock cycle.</strong></li>
<li>Each time the clock turns on, the state of our lightbulbs is shared with the guy in the box</li>
<li>The guy then has until the clock turns off to send a message back</li>
<li>The next time the clock turns on, a new message is sent to the CPU</li>
<li>The time between each clock cycle is the <strong>speed</strong> that a CPU can perform a given task</li>
<li>The maximum number of clock cycles a CPU can handle in given period of time is called the clock speed.</li>
</ul>
<table class="caption-top">
<colgroup>
<col style="width: 100%">
</colgroup>
<tbody>
<tr class="odd">
<td style="text-align: left;">:::{.callout-tip}</td>
</tr>
<tr class="even">
<td style="text-align: left;"># Sample Guy in a Box Problem</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Using the following codebook, ask the ‚ÄúGuy in a box‚Äù to calculate 2+3</td>
</tr>
<tr class="even">
<td style="text-align: left;">You must send a series of commandsto the CPU. The CPU will act on each command and give you an answer.</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Your answer should be a <strong>sequence of numbers</strong> you could send to the guy in the box to get the right answer.</td>
</tr>
<tr class="even">
<td style="text-align: left;"><img data-src="_assets/understanding-cpus17.png" title="A sample title." alt="Sample alt text. To be replaced!"></td>
</tr>
</tbody>
</table>
<h4 id="solution">Solution</h4>
<pre><code>10000000  The next line is a number, put it in AX
00000010  The number 2
10010000  The next line is a number, put it in BX
00000011  The number 3
10110000  Add AX to BX and put the result in AX
11000000  Place the value of AX on the external data bus</code></pre>
<p>A set of commands such as this is called a program. A program is a series of command sent to a CPU in a specific order for the CPU to perform work.</p>
<p>:::</p>
</section>
<section id="pipelining" class="slide level2">
<h2>Pipelining üö•</h2>
<ul>
<li>Almost all CPU instructions feature a set of 4 stages:</li>
<li><strong>Fetch</strong> : retrieve the instruction, address, and data, write them to registers</li>
<li><strong>Decode</strong> : search for instruction code in codebook, verify it is a real instruction, and that data/address are valid</li>
<li><strong>Execute</strong> : perform the instruction, update registers with results</li>
<li><strong>Write:</strong> write to databus to share results</li>
<li>Rather than have each instruction repeat all of these steps, we can organize CPUs further by specializing our ‚Äúguy in a box‚Äù for each stage</li>
<li>This is called <strong>pipelining</strong> , and it allows for greater efficiency in CPU programming</li>
</ul>

<img data-src="_assets/understanding-cpus18.png" title="A sample title." alt="Sample alt text. To be replaced!" class="r-stretch quarto-figure-center"><p class="caption">Analogy of multiple men in a box to illustrate the idea of a pipeline.</p></section>
<section id="cpu-properties" class="slide level2">
<h2>CPU Properties üìä</h2>
<p>The most important properties that define CPU behavior are <strong>speed</strong> and <strong>bus width</strong>: that is, how fast the clock cycle repeats, and how much data per clock cycle the CPU can process.</p>
<h3 id="clock-speed">Clock Speed</h3>
<p>We measure CPU <strong>speed</strong> : in cycles per second, e.g.&nbsp;megahertz (MHz) or gigahertz (GHz).</p>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Unit of Measurement</strong></p>
</div>
<div class="callout-content">
<p><strong>Hertz</strong>, usually written as <strong>Hz</strong>, denote frequency. 1Hz is ‚Äúone time per second‚Äù, 10Hz is ‚Äúten times per second‚Äù. We can use <strong>SI Prefixes</strong> (International System of Unit Prefixes) to compare magnitudes easily.</p>
<p>You will see many of these in computer science over and over again ‚Äì get to know them well!</p>
<table class="table-striped table-hover caption-top">
<caption>SI Prefixes for Frequencies</caption>
<colgroup>
<col style="width: 11%">
<col style="width: 16%">
<col style="width: 16%">
<col style="width: 55%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Unit</th>
<th style="text-align: left;">Meaning</th>
<th style="text-align: left;">Definition</th>
<th style="text-align: left;">Examples</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Hz</td>
<td style="text-align: left;">Once per second</td>
<td style="text-align: left;">1/s, or 1Hz</td>
<td style="text-align: left;">1-2Hz: human heart-rate at rest (1Hz = 60 beats per minute, 2Hz = 120 bpm)<br>24Hz: framerate of historic cinema<br>20-60Hz: frequency range for bass notes (C0 = 16.35Hz to C2 = 65.4Hz)<br>60-144Hz: framerate of most monitors</td>
</tr>
<tr class="even">
<td style="text-align: left;">kHz</td>
<td style="text-align: left;">Thousand times per second</td>
<td style="text-align: left;">1000 Hz</td>
<td style="text-align: left;">0.1-2kHz: frequency range for midrange notes (A2=0.110kHz, C7=2kHz)<br>20kHz: maximum frequency audible to human ear<br>740 kHz: Intel 4004 processor clock speed (1971)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">MHz</td>
<td style="text-align: left;">Million times per second</td>
<td style="text-align: left;">1000000 Hz</td>
<td style="text-align: left;">8MHz: fastest CPU clock speed in the 70s<br>35MHz: fastest CPU clock speed in the 80s<br>500-1000MHz: fastest CPU clock speed in the 90s)</td>
</tr>
<tr class="even">
<td style="text-align: left;">GHz</td>
<td style="text-align: left;">Billion times per second</td>
<td style="text-align: left;">1000000000 Hz</td>
<td style="text-align: left;">2-5GHz: Almost all consumer CPUs in 2024 have base clock speeds in this range<br>9.117 GHz: fastest CPU clock speed ever recorded (2024)</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<h3 id="cpu-cores">CPU Cores</h3>
<p>A multi-core SPU means that more than one CPU core is integrated into a single chip, each capable of running parallel processes. This means, in theory, that we multiply the amount of information that can be processes, send and recieved from/to the RAM.</p>
<p>Benefits of Multi-core processors: - Enhancing the multitasking: multiple jobs done at the same time. - Improved performance: Faster and smoother performance. - Energy efficiency: More work can be done with less power.</p>
<h4 id="cpu-threads">CPU Threads</h4>
<p>CPU cores and threads are closely related but not the same. A core is a physical unit within the CPU that executes instructions, while a thread is a virtual sequence of instructions assigned to a core. Think of cores as workers and threads as the jobs they carry out.<br>
&gt; When CPU has 16 threads, it simply means it can run 16 threads simultaneously.</p>
<h3 id="bus-width">Bus width</h3>
<p>The amount of data processed at a time depends on the ‚Äúnumber of lightbulbs‚Äù or the <strong>width</strong> of the <strong>data bus</strong></p>
<p><strong>Bus width</strong> is measured in bits, e.g.&nbsp;8-bits, 16-bit, 32-bit, 64-bit, etc.</p>
<div class="callout callout-note no-icon callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<p><strong>Question</strong></p>
</div>
<div class="callout-content">
<p>How many bits do you need in <em>bus width</em> to represent the Guy in the Box and their codebook from the previous problems?</p>
</div>
</div>
</div>
</section>
<section class="slide level2">

<p>In actual computers, the CPU receives <strong>instructions</strong> ,<strong>addresses memory</strong> , and <strong>data</strong> on separate buses.</p>
<p>This allows the CPU to send AND receive the following information at the same time:</p>
<ul>
<li><p><strong>Control Bus</strong>: What command to perform</p></li>
<li><p><strong>Address Bus</strong>: Where in memory the result should be stored</p></li>
<li><p><strong>Data Bus</strong>: What data to use to perform the command</p></li>
</ul>
<p><img data-src="_assets/understanding-cpus19.png" title="A sample title." alt="Sample alt text. To be replaced!"> ‚Äî</p>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Note</strong></p>
</div>
<div class="callout-content">
<p>The CPU is constantly talking to the RAM and the hardware components. At every clock interval, new instructions are sent through the control bus. Here are a few common instructions:</p>
<table class="caption-top">
<colgroup>
<col style="width: 15%">
<col style="width: 84%">
</colgroup>
<thead>
<tr class="header">
<th>Instruction</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>LOAD</code></td>
<td>Load this value from RAM</td>
</tr>
<tr class="even">
<td><code>ADD</code></td>
<td>Add these two numbers</td>
</tr>
<tr class="odd">
<td><code>STORE</code></td>
<td>Save this value to RAM</td>
</tr>
<tr class="even">
<td><code>COMPARE</code></td>
<td>Compare these two numbers</td>
</tr>
<tr class="odd">
<td><code>JUMP IF</code></td>
<td>If a condition is true, jump to this next set of instructions (example : if statement)</td>
</tr>
<tr class="even">
<td><code>JUMP</code></td>
<td>Jump to this next set of instructions (without any conditions - example function call)</td>
</tr>
<tr class="odd">
<td><code>IN</code></td>
<td>Read data from the input device (example keyboard)</td>
</tr>
<tr class="even">
<td><code>OUT</code></td>
<td>Send data to an output device (example printer)</td>
</tr>
</tbody>
</table>
<p>All this information, the instruction, the location of the hardware devices are all in binary (machine code)! When you write a program in C#, Java, Python, etc. You are programming in high level programming language that will be compiled into machine code by the compiler of this language (or interpreted by the interpreter of this language).</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="_assets/understanding-cpus20.png" title="A sample title." alt="Sample alt text. To be replaced!"></p>
<figcaption>Illustration of CPU wiring to the RAM. Image source: <strong>Figure from</strong> <a href="https://www.youtube.com/watch?v=cNN_tTXABUA&amp;">In One Lesson</a> on Youtube (excellent video explaination on CPUs)</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section class="slide level2">

<h3 id="highway-analogy-clock-speed-vs-bus-width">Highway analogy: clock Speed vs bus width</h3>
<ul>
<li>You can double check that you understand a scientific concept by checking what <strong>units of measurement</strong> that concept is measured by:</li>
<li>Highway
<ul>
<li><strong>Number of lanes:</strong> (a number)</li>
<li><strong>Speed limit:</strong> (unit distance per time elapsed, e.g.&nbsp;km/h)</li>
</ul></li>
<li>System bus
<ul>
<li><strong>Bus width: </strong> (a number of bits, eg a 32-bit processor)</li>
<li><strong>Bus speed: </strong> (unit information per time elapsed, e.g.&nbsp;bits/second)</li>
</ul></li>
</ul>

<img data-src="_assets/understanding-cpus21.png" title="A sample title." alt="Sample alt text. To be replaced!" class="r-stretch quarto-figure-center"><p class="caption">Analogy of the highway. Image source: unknown.</p></section>
<section id="cpu-manufacturers" class="title-slide slide level1 center">
<h1>CPU Manufacturers üè≠</h1>

<img data-src="_assets/understanding-cpus22.png" style="width:80.0%" class="r-stretch quarto-figure-center"><p class="caption">How to read the CPU model and generation</p><ul>
<li><strong>Brand</strong>: Refers to company who designed the CPU (often Intel or AMD)</li>
<li><strong>Tier</strong>: Refers to the ranking of this CPU based on their capacilities and performance. Generally the higher the tier the better the pverall performance of the CPU.</li>
<li><strong>Generation</strong>: Tells us how new is this CPU compared to another one. Generally, higher generations within the same tier have improved design.</li>
<li><strong>Model</strong>: It‚Äôs a number that uniquely identify a CPU.</li>
<li><strong>Sufix</strong>: Is an added letter which depending on the manufacturer could refer to different properties of the CPU. For example, intel uses ‚ÄúK‚Äù to indicate that the CPU is unlocked and can be overclocked. AMD uses X to indicate that this CPU is already slightly overclocked.</li>
</ul>
<!-- ## Exercises

## Knowledge check

## Additional references -->


</section>
    </div>
  <div class="quarto-auto-generated-content" style="display: none;">
<div class="footer footer-default">

</div>
</div></div>

  <script>window.backupDefine = window.define; window.define = undefined;</script>
  <script src="../../site_libs/revealjs/dist/reveal.js"></script>
  <!-- reveal.js plugins -->
  <script src="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.js"></script>
  <script src="../../site_libs/revealjs/plugin/pdf-export/pdfexport.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/quarto-support/support.js"></script>
  

  <script src="../../site_libs/revealjs/plugin/notes/notes.js"></script>
  <script src="../../site_libs/revealjs/plugin/search/search.js"></script>
  <script src="../../site_libs/revealjs/plugin/zoom/zoom.js"></script>
  <script src="../../site_libs/revealjs/plugin/math/math.js"></script>
  <script>window.define = window.backupDefine; window.backupDefine = undefined;</script>

  <script>

      // Full list of configuration options available at:
      // https://revealjs.com/config/
      Reveal.initialize({
'controlsAuto': true,
'previewLinksAuto': false,
'pdfSeparateFragments': false,
'autoAnimateEasing': "ease",
'autoAnimateDuration': 1,
'autoAnimateUnmatched': true,
'jumpToSlide': true,
'menu': {"side":"left","useTextContentForMissingTitles":true,"markers":false,"loadIcons":false,"custom":[{"title":"Tools","icon":"<i class=\"fas fa-gear\"></i>","content":"<ul class=\"slide-menu-items\">\n<li class=\"slide-tool-item active\" data-item=\"0\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.fullscreen(event)\"><kbd>f</kbd> Fullscreen</a></li>\n<li class=\"slide-tool-item\" data-item=\"1\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.speakerMode(event)\"><kbd>s</kbd> Speaker View</a></li>\n<li class=\"slide-tool-item\" data-item=\"2\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.overview(event)\"><kbd>o</kbd> Slide Overview</a></li>\n<li class=\"slide-tool-item\" data-item=\"3\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.togglePdfExport(event)\"><kbd>e</kbd> PDF Export Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"4\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.toggleScrollView(event)\"><kbd>r</kbd> Scroll View Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"5\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.keyboardHelp(event)\"><kbd>?</kbd> Keyboard Help</a></li>\n</ul>"}],"openButton":true},
'smaller': false,
 
        // Display controls in the bottom right corner
        controls: false,

        // Help the user learn the controls by providing hints, for example by
        // bouncing the down arrow when they first encounter a vertical slide
        controlsTutorial: false,

        // Determines where controls appear, "edges" or "bottom-right"
        controlsLayout: 'edges',

        // Visibility rule for backwards navigation arrows; "faded", "hidden"
        // or "visible"
        controlsBackArrows: 'faded',

        // Display a presentation progress bar
        progress: true,

        // Display the page number of the current slide
        slideNumber: false,

        // 'all', 'print', or 'speaker'
        showSlideNumber: 'all',

        // Add the current slide number to the URL hash so that reloading the
        // page/copying the URL will return you to the same slide
        hash: true,

        // Start with 1 for the hash rather than 0
        hashOneBasedIndex: false,

        // Flags if we should monitor the hash and change slides accordingly
        respondToHashChanges: true,

        // Push each slide change to the browser history
        history: true,

        // Enable keyboard shortcuts for navigation
        keyboard: true,

        // Enable the slide overview mode
        overview: true,

        // Disables the default reveal.js slide layout (scaling and centering)
        // so that you can use custom CSS layout
        disableLayout: false,

        // Vertical centering of slides
        center: false,

        // Enables touch navigation on devices with touch input
        touch: true,

        // Loop the presentation
        loop: false,

        // Change the presentation direction to be RTL
        rtl: false,

        // see https://revealjs.com/vertical-slides/#navigation-mode
        navigationMode: 'linear',

        // Randomizes the order of slides each time the presentation loads
        shuffle: false,

        // Turns fragments on and off globally
        fragments: true,

        // Flags whether to include the current fragment in the URL,
        // so that reloading brings you to the same fragment position
        fragmentInURL: false,

        // Flags if the presentation is running in an embedded mode,
        // i.e. contained within a limited portion of the screen
        embedded: false,

        // Flags if we should show a help overlay when the questionmark
        // key is pressed
        help: true,

        // Flags if it should be possible to pause the presentation (blackout)
        pause: true,

        // Flags if speaker notes should be visible to all viewers
        showNotes: false,

        // Global override for autoplaying embedded media (null/true/false)
        autoPlayMedia: null,

        // Global override for preloading lazy-loaded iframes (null/true/false)
        preloadIframes: null,

        // Number of milliseconds between automatically proceeding to the
        // next slide, disabled when set to 0, this value can be overwritten
        // by using a data-autoslide attribute on your slides
        autoSlide: 0,

        // Stop auto-sliding after user input
        autoSlideStoppable: true,

        // Use this method for navigation when auto-sliding
        autoSlideMethod: null,

        // Specify the average time in seconds that you think you will spend
        // presenting each slide. This is used to show a pacing timer in the
        // speaker view
        defaultTiming: null,

        // Enable slide navigation via mouse wheel
        mouseWheel: false,

        // The display mode that will be used to show slides
        display: 'block',

        // Hide cursor if inactive
        hideInactiveCursor: true,

        // Time before the cursor is hidden (in ms)
        hideCursorTime: 5000,

        // Opens links in an iframe preview overlay
        previewLinks: false,

        // Transition style (none/fade/slide/convex/concave/zoom)
        transition: 'slide',

        // Transition speed (default/fast/slow)
        transitionSpeed: 'default',

        // Transition style for full page slide backgrounds
        // (none/fade/slide/convex/concave/zoom)
        backgroundTransition: 'none',

        // Number of slides away from the current that are visible
        viewDistance: 3,

        // Number of slides away from the current that are visible on mobile
        // devices. It is advisable to set this to a lower number than
        // viewDistance in order to save resources.
        mobileViewDistance: 2,

        // The "normal" size of the presentation, aspect ratio will be preserved
        // when the presentation is scaled to fit different resolutions. Can be
        // specified using percentage units.
        width: 1050,

        height: 700,

        // Factor of the display size that should remain empty around the content
        margin: 0.2,

        math: {
          mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js',
          config: 'TeX-AMS_HTML-full',
          tex2jax: {
            inlineMath: [['\\(','\\)']],
            displayMath: [['\\[','\\]']],
            balanceBraces: true,
            processEscapes: false,
            processRefs: true,
            processEnvironments: true,
            preview: 'TeX',
            skipTags: ['script','noscript','style','textarea','pre','code'],
            ignoreClass: 'tex2jax_ignore',
            processClass: 'tex2jax_process'
          },
        },

        // reveal.js plugins
        plugins: [QuartoLineHighlight, PdfExport, RevealMenu, QuartoSupport,

          RevealMath,
          RevealNotes,
          RevealSearch,
          RevealZoom
        ]
      });
    </script>
    <script id="quarto-html-after-body" type="application/javascript">
      window.document.addEventListener("DOMContentLoaded", function (event) {
        const tabsets =  window.document.querySelectorAll(".panel-tabset-tabby")
        tabsets.forEach(function(tabset) {
          const tabby = new Tabby('#' + tabset.id);
        });
        const isCodeAnnotation = (el) => {
          for (const clz of el.classList) {
            if (clz.startsWith('code-annotation-')) {                     
              return true;
            }
          }
          return false;
        }
        const onCopySuccess = function(e) {
          // button target
          const button = e.trigger;
          // don't keep focus
          button.blur();
          // flash "checked"
          button.classList.add('code-copy-button-checked');
          var currentTitle = button.getAttribute("title");
          button.setAttribute("title", "Copied!");
          let tooltip;
          if (window.bootstrap) {
            button.setAttribute("data-bs-toggle", "tooltip");
            button.setAttribute("data-bs-placement", "left");
            button.setAttribute("data-bs-title", "Copied!");
            tooltip = new bootstrap.Tooltip(button, 
              { trigger: "manual", 
                customClass: "code-copy-button-tooltip",
                offset: [0, -8]});
            tooltip.show();    
          }
          setTimeout(function() {
            if (tooltip) {
              tooltip.hide();
              button.removeAttribute("data-bs-title");
              button.removeAttribute("data-bs-toggle");
              button.removeAttribute("data-bs-placement");
            }
            button.setAttribute("title", currentTitle);
            button.classList.remove('code-copy-button-checked');
          }, 1000);
          // clear code selection
          e.clearSelection();
        }
        const getTextToCopy = function(trigger) {
            const codeEl = trigger.previousElementSibling.cloneNode(true);
            for (const childEl of codeEl.children) {
              if (isCodeAnnotation(childEl)) {
                childEl.remove();
              }
            }
            return codeEl.innerText;
        }
        const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
          text: getTextToCopy
        });
        clipboard.on('success', onCopySuccess);
        if (window.document.getElementById('quarto-embedded-source-code-modal')) {
          const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
            text: getTextToCopy,
            container: window.document.getElementById('quarto-embedded-source-code-modal')
          });
          clipboardModal.on('success', onCopySuccess);
        }
          var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
          var mailtoRegex = new RegExp(/^mailto:/);
            var filterRegex = new RegExp("https:\/\/John-Abbott-College\.github\.io\/1N6-Notes\/");
          var isInternal = (href) => {
              return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
          }
          // Inspect non-navigation links and adorn them if external
         var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
          for (var i=0; i<links.length; i++) {
            const link = links[i];
            if (!isInternal(link.href)) {
              // undo the damage that might have been done by quarto-nav.js in the case of
              // links that we want to consider external
              if (link.dataset.originalHref !== undefined) {
                link.href = link.dataset.originalHref;
              }
            }
          }
        function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
          const config = {
            allowHTML: true,
            maxWidth: 500,
            delay: 100,
            arrow: false,
            appendTo: function(el) {
                return el.closest('section.slide') || el.parentElement;
            },
            interactive: true,
            interactiveBorder: 10,
            theme: 'light-border',
            placement: 'bottom-start',
          };
          if (contentFn) {
            config.content = contentFn;
          }
          if (onTriggerFn) {
            config.onTrigger = onTriggerFn;
          }
          if (onUntriggerFn) {
            config.onUntrigger = onUntriggerFn;
          }
            config['offset'] = [0,0];
            config['maxWidth'] = 700;
          window.tippy(el, config); 
        }
        const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
        for (var i=0; i<noterefs.length; i++) {
          const ref = noterefs[i];
          tippyHover(ref, function() {
            // use id or data attribute instead here
            let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
            try { href = new URL(href).hash; } catch {}
            const id = href.replace(/^#\/?/, "");
            const note = window.document.getElementById(id);
            if (note) {
              return note.innerHTML;
            } else {
              return "";
            }
          });
        }
        const findCites = (el) => {
          const parentEl = el.parentElement;
          if (parentEl) {
            const cites = parentEl.dataset.cites;
            if (cites) {
              return {
                el,
                cites: cites.split(' ')
              };
            } else {
              return findCites(el.parentElement)
            }
          } else {
            return undefined;
          }
        };
        var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
        for (var i=0; i<bibliorefs.length; i++) {
          const ref = bibliorefs[i];
          const citeInfo = findCites(ref);
          if (citeInfo) {
            tippyHover(citeInfo.el, function() {
              var popup = window.document.createElement('div');
              citeInfo.cites.forEach(function(cite) {
                var citeDiv = window.document.createElement('div');
                citeDiv.classList.add('hanging-indent');
                citeDiv.classList.add('csl-entry');
                var biblioDiv = window.document.getElementById('ref-' + cite);
                if (biblioDiv) {
                  citeDiv.innerHTML = biblioDiv.innerHTML;
                }
                popup.appendChild(citeDiv);
              });
              return popup.innerHTML;
            });
          }
        }
      });
      </script>
    

</body></html>