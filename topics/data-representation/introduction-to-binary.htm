<!DOCTYPE html>
<html lang="en"><head>
<link href="../../_assets/favicons/favicon.ico" rel="icon">
<script src="../../site_libs/clipboard/clipboard.min.js"></script>
<script src="../../site_libs/quarto-html/tabby.min.js"></script>
<script src="../../site_libs/quarto-html/popper.min.js"></script>
<script src="../../site_libs/quarto-html/tippy.umd.min.js"></script>
<link href="../../site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/light-border.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting-dark-b651517ce65839d647a86e2780455cfb.css" rel="stylesheet" id="quarto-text-highlighting-styles"><meta charset="utf-8">
  <meta name="generator" content="quarto-1.8.24">

  <meta name="dcterms.date" content="2025-09-15">
  <title>{{&lt; var course.title &gt;}} – Introduction to Binary</title>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reset.css">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reveal.css">
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
      vertical-align: middle;
    }
  </style>
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/theme/quarto-06e768f098560084c2d7120de8ad04fb.css">
  <link href="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/quarto-support/footer.css" rel="stylesheet">
  <style type="text/css">
    .reveal div.sourceCode {
      margin: 0;
      overflow: auto;
    }
    .reveal div.hanging-indent {
      margin-left: 1em;
      text-indent: -1em;
    }
    .reveal .slide:not(.center) {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide.scrollable {
      overflow-y: auto;
    }
    .reveal .footnotes {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide .absolute {
      position: absolute;
      display: block;
    }
    .reveal .footnotes ol {
      counter-reset: ol;
      list-style-type: none; 
      margin-left: 0;
    }
    .reveal .footnotes ol li:before {
      counter-increment: ol;
      content: counter(ol) ". "; 
    }
    .reveal .footnotes ol li > p:first-child {
      display: inline-block;
    }
    .reveal .slide ul,
    .reveal .slide ol {
      margin-bottom: 0.5em;
    }
    .reveal .slide ul li,
    .reveal .slide ol li {
      margin-top: 0.4em;
      margin-bottom: 0.2em;
    }
    .reveal .slide ul[role="tablist"] li {
      margin-bottom: 0;
    }
    .reveal .slide ul li > *:first-child,
    .reveal .slide ol li > *:first-child {
      margin-block-start: 0;
    }
    .reveal .slide ul li > *:last-child,
    .reveal .slide ol li > *:last-child {
      margin-block-end: 0;
    }
    .reveal .slide .columns:nth-child(3) {
      margin-block-start: 0.8em;
    }
    .reveal blockquote {
      box-shadow: none;
    }
    .reveal .tippy-content>* {
      margin-top: 0.2em;
      margin-bottom: 0.7em;
    }
    .reveal .tippy-content>*:last-child {
      margin-bottom: 0.2em;
    }
    .reveal .slide > img.stretch.quarto-figure-center,
    .reveal .slide > img.r-stretch.quarto-figure-center {
      display: block;
      margin-left: auto;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-left,
    .reveal .slide > img.r-stretch.quarto-figure-left  {
      display: block;
      margin-left: 0;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-right,
    .reveal .slide > img.r-stretch.quarto-figure-right  {
      display: block;
      margin-left: auto;
      margin-right: 0; 
    }
  </style>
<meta property="og:title" content="Introduction to Binary – Technical Support">
<meta property="og:description" content="What’s a bit, and how is it implemented in a computer?">
<meta property="og:image" content="https://John-Abbott-College.github.io/1N6-Notes/topics/data-representation/_assets/favicons/favicon-32x32.png">
<meta property="og:site_name" content="{{< var course.title >}}">
</head>
<body class="quarto-dark">
  <div class="reveal">
    <div class="slides">

<section id="title-slide" class="quarto-title-block center">
  <h1 class="title">Introduction to Binary</h1>
  <p class="subtitle">What’s a bit, and how is it implemented in a computer?</p>

<div class="quarto-title-authors">
</div>

  <p class="date">2025-09-15</p>
</section><section id="TOC">
<nav role="doc-toc"> 
<h2 id="toc-title">Table of contents</h2>
<ul>
<li><a href="#/introduction-to-binary" id="/toc-introduction-to-binary">Introduction to binary</a></li>
<li><a href="#/bits-binary-digits" id="/toc-bits-binary-digits">Bits: BInary digiTs ▪️▫️</a></li>
<li><a href="#/bytes" id="/toc-bytes">Bytes 🇧</a></li>
<li><a href="#/binary-to-decimal" id="/toc-binary-to-decimal">Binary to Decimal 🔢</a></li>
<li><a href="#/decimal-to-binary-10" id="/toc-decimal-to-binary-10">Decimal to Binary 1️⃣0️⃣</a></li>
<li><a href="#/range-of-numbers-based-on-number-of-bits" id="/toc-range-of-numbers-based-on-number-of-bits">Range of numbers based on number of bits ↔︎️</a></li>
<li><a href="#/exercises" id="/toc-exercises">Exercises</a></li>
</ul>
</nav>
</section>
<section id="introduction-to-binary" class="title-slide slide level1 center">
<h1>Introduction to binary</h1>
<p>Everyone “knows” that computers use “binary” to operate</p>
<p>But, as we saw last class, computers don’t “know” anything ultimately, its CPU is just configured to react in particularly sophisticated ways when its switches (the lightbulbs for the “guy in the box”) are turned <strong>on</strong> or <strong>off</strong>.</p>
<p>So what is binary anyway? And what does it have to do with computers?</p>
<p>In order to understand the <strong>Binary</strong> numeral system, we can compare it to something we already know: the <strong>Decimal</strong> numeral system.</p>
<p>In <strong>decimal</strong> , numbers are represented by combinations of <strong>ten </strong> different symbols: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9).</p>
<p>We call decimal a <strong>base 10</strong> numeral system.</p>
<blockquote>
<p>If we have more than “9” of something, another <strong>digit</strong> is needed (another power of ten):</p>
<ul>
<li>9 + 1 = 10</li>
<li>99 + 1 = 100, etc.</li>
</ul>
</blockquote>
<p>How do we represent numbers in binary and how does it compare to binary?</p>
<p>In <strong>binary</strong> , there are only <strong>two</strong> symbols (0, 1).</p>
<p>We call binary a <strong>base 2</strong> numeral system.</p>
<blockquote>
<p>If we have more than “1” of something, another <strong>bit</strong> (power) is needed:</p>
<ul>
<li>1 + 1 = 10 (in english: one plus one equals two)</li>
<li>11 + 1 = 100 (in english: three plus one equals four)</li>
</ul>
</blockquote>
<p>It’s counterintuitive at first! But there’s nothing fundamentally different about binary than decimal – we’re just more used to using decimal instead. Since we’re reusing the symbols 1 and 0 from the decimal system, there is a convention to use <strong>subscript</strong> to disambiguate between different numeral systems:</p>
<blockquote>

<ul>
<li><p><strong>1<sub>2</sub> + 1<sub>2</sub> = 10<sub>2</sub></strong> is the same as <strong>1<sub>10</sub> + 1<sub>10</sub> = 2<sub>10</sub></strong> is the same as <strong>one plus one equals two</strong></p></li>
<li><p><strong>11<sub>2</sub> + 1<sub>2</sub> = 100<sub>2</sub></strong> is the same as <strong>3<sub>10</sub> + 1<sub>10</sub> = 4<sub>10</sub></strong> is the same as <strong>three plus one equals four</strong></p></li>
</ul>

</blockquote>
<p>These subscripts are not always required, but can be very useful when the numeral systems are mixed in the same context.</p>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Note</strong></p>
</div>
<div class="callout-content">
<p>Note: binary and decimal are not the only possible numeral systems. All that distinguishes numeral systems is the number of symbols you agree to use to represent numbers – there are infinite possible numeral systems!</p>
<p><strong>Hexadecimal</strong> is another useful numeral system (16 symbols, or <strong>base 16</strong>) which we will discuss later in the course.</p>
</div>
</div>
</div>
</section>

<section>
<section id="bits-binary-digits" class="title-slide slide level1 center">
<h1>Bits: BInary digiTs ▪️▫️</h1>
<p>So what does binary have to do with computers?</p>
<p>A <strong>Bit</strong> (Binary Digit) is the basic unit of information representing one of two discrete states. It is the smallest unit of information within the computer. Bits have one of two values:</p>
<ul>
<li><em>0 (off) or 1 (on)</em></li>
<li><em>0 (False) or 1 (True)</em></li>
</ul>
<p>We often compare this to a light switch being either on of off…</p>

<img data-src="https://media1.tenor.com/m/RlK21NHtq5UAAAAd/turn-off-shut-off.gif" title="A sample title." alt="Sample alt text. To be replaced!" class="r-stretch quarto-figure-center"><p class="caption">Comparison between a bit and an ON (1) OFF (0) switch</p></section>
<section id="how-are-bits-physically-implemented" class="slide level2">
<h2>How are Bits physically implemented?</h2>
<p>There are various ways to design circuits that effectively differentiate between “on” and “off” states. One method involves using a <strong>transistor</strong>, which can either be switched on or off to represent binary information. Another approach uses a <strong>capacitor</strong>, where its state of being charged or discharged conveys the desired data. In <strong>magnetic</strong> disks (like HDDs), information is stored as bits based on the direction of the magnetic field, either north-south or south-north. Similarly, on <strong>optical discs</strong> (such as CD-ROMs), bits are represented by whether a bit on the surface is shiny or not shiny. Lastly, over <strong>telephone lines</strong> or through <strong>radio</strong>, binary data is transmitted using high or low-pitched tones to represent the bits. Each of these methods relies on a distinct physical characteristic to represent binary information reliably.</p>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="_assets/data-representation2.png" alt=""></p>
<figcaption>Capacitors can be charged or uncharged in RAM</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="https://www.anypcba.com/upfile/blogs/articles/841/transistor-symbols.webp" alt=""></p>
<figcaption>A transistor is ON or OFF in any chip of the computer such as the CPU and GPU Source: <a href="https://www.anypcba.com/upfile/blogs/articles/841/transistor-symbols.webp">Any PCB</a></figcaption>
</figure>
</div>
</section></section>
<section>
<section id="bytes" class="title-slide slide level1 center">
<h1>Bytes 🇧</h1>
<p>A Byte is a collection of bits known as the unit of digital information. Historically, it was the number of bits required to encode a single character.</p>
<p>1 Byte = 8 bits</p>
<p>Abbreviation: <strong>B</strong>. E.g. <strong>4B</strong> of storage means <strong>4 Bytes</strong> means <strong>32 bits</strong>.</p>

<img data-src="_assets/data-representation3.jpg" title="A sample title." alt="Sample alt text. To be replaced!" class="r-stretch quarto-figure-center"><p class="caption">Bit versus Byte.</p></section>
<section id="history-of-bytes" class="slide level2">
<h2>History of Bytes 📖</h2>
<p>A byte represents the number of bits used to encode a single <strong>character</strong> in a computer, making it the smallest <strong>addressable</strong> unit of memory in many computer architectures. Historically, the size of a byte was hardware-dependent, with no universal standard governing its size. However, in 1993, a standard was introduced that defined the size of a byte as 8 bits, a convention that is now widely adopted across modern computing systems. This standardization has helped ensure consistency in how data is stored and processed across different platforms and devices.</p>
</section>
<section id="si-convention" class="slide level2">
<h2>SI Convention 📜</h2>
<table class="caption-top">
<colgroup>
<col style="width: 11%">
<col style="width: 6%">
<col style="width: 20%">
<col style="width: 37%">
<col style="width: 24%">
</colgroup>
<thead>
<tr class="header">
<th>Unit Name</th>
<th>Symbol</th>
<th>Multiplying Factor</th>
<th>Multiplying factor (in thousands)</th>
<th>Description in English</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Byte</td>
<td>B</td>
<td>1</td>
<td>1</td>
<td><em>One byte</em></td>
</tr>
<tr class="even">
<td>Kilo Byte</td>
<td>kB</td>
<td>1000</td>
<td>1000</td>
<td><em>One thousand bytes</em></td>
</tr>
<tr class="odd">
<td>Mega Byte</td>
<td>MB</td>
<td>1000,000</td>
<td>1000<sup>2</sup></td>
<td><em>One million byte</em></td>
</tr>
<tr class="even">
<td>Giga Byte</td>
<td>GB</td>
<td>1000,000,000</td>
<td>1000<sup>3</sup></td>
<td><em>One billion byte</em></td>
</tr>
<tr class="odd">
<td>Tera Byte</td>
<td>TB</td>
<td>1000,000,000,000</td>
<td>1000<sup>4</sup></td>
<td><em>One trillion byte</em></td>
</tr>
<tr class="even">
<td>Peta Byte</td>
<td>PB</td>
<td>10^15</td>
<td>1000<sup>5</sup></td>
<td><em>One quadrillion byte</em></td>
</tr>
<tr class="odd">
<td>Exa Byte</td>
<td>EB</td>
<td>10^18</td>
<td>1000<sup>6</sup></td>
<td><em>One quintillion byte</em></td>
</tr>
<tr class="even">
<td>Zetta Byte</td>
<td>ZB</td>
<td>10^21</td>
<td>1000<sup>7</sup></td>
<td><em>One sextillion byte</em></td>
</tr>
<tr class="odd">
<td>Yotta Byte</td>
<td>YB</td>
<td>10^24</td>
<td>1000<sup>8</sup></td>
<td><em>One septillion byte</em></td>
</tr>
</tbody>
</table>
<p><em>Source: <a href="https://www.nist.gov/pml/owm/metric-si-prefixes">NIST</a></em></p>
</section>
<section id="iec-convention" class="slide level2">
<h2>IEC Convention 📜</h2>
<p>To add to the confusion, Windows and some other operating systems don’t follow the SI conventions. They use symbols like Kb and Mb, but instead of referring to powers of 10, they count bytes in powers of 2. This means that if a manufacturer labels a hard drive using <strong>SI conventions</strong>, the operating system may display a smaller capacity than advertised.</p>
<p>In this course, we will stick to the SI conventions, where 1 Kilobyte equals 1000 bytes, and we will distinguish powers of 2 using the <strong>IEC convention</strong>. In the late 1990s, the IEC introduced new prefixes to clearly separate capacities based on powers of 10 from those based on powers of 2.</p>
<table class="caption-top">
<colgroup>
<col style="width: 13%">
<col style="width: 9%">
<col style="width: 27%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th>Unit Name</th>
<th>Symbol</th>
<th>Multiplying Factor</th>
<th>Multiplying factor (in thousands)</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Kibi Byte</td>
<td>Kib</td>
<td>1000</td>
<td>1024</td>
</tr>
<tr class="even">
<td>Debi Byte</td>
<td>Mib</td>
<td>1000,000</td>
<td>1024<sup>2</sup></td>
</tr>
<tr class="odd">
<td>Gibi Byte</td>
<td>Gib</td>
<td>1000,000,000</td>
<td>1024<sup>3</sup></td>
</tr>
<tr class="even">
<td>Tebi Byte</td>
<td>Tib</td>
<td>1000,000,000,000</td>
<td>1024<sup>4</sup></td>
</tr>
<tr class="odd">
<td>Pebi Byte</td>
<td>Pib</td>
<td>10^15</td>
<td>1024<sup>5</sup></td>
</tr>
<tr class="even">
<td>gibi Byte</td>
<td>Eib</td>
<td>10^18</td>
<td>1024<sup>6</sup></td>
</tr>
<tr class="odd">
<td>Zebi Byte</td>
<td><em>Zib</em></td>
<td>10^21</td>
<td>1024<sup>7</sup></td>
</tr>
<tr class="even">
<td>Yobi Byte</td>
<td>Yib</td>
<td>10^24</td>
<td>1024<sup>8</sup></td>
</tr>
</tbody>
</table>
<p><a href="https://en.wikipedia.org/wiki/Byte#Multiple-byte_units" class="uri">https://en.wikipedia.org/wiki/Byte#Multiple-byte_units</a></p>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Question</strong></p>
</div>
<div class="callout-content">
<p>Johnny buys a 1Tb external SSD but once plugged into his Windows machine, he notices he only has 931 Gb of available memory space. Can you explain why?</p>
</div>
</div>
</div>
</section></section>
<section id="binary-to-decimal" class="title-slide slide level1 center scrollable">
<h1>Binary to Decimal 🔢</h1>
<p>Similar to the decimal system, the binary system breaksdown a number in powers of 2 composing this number. ::: {layout-ncol=2} <img data-src="_assets/data-representation9.png" alt="Decomposing 735 in powers of 10 Source: Cheever"></p>
<p><img data-src="_assets/data-representation10.png" alt="Decomposing 181 in powers of 2 Source: Cheever"> :::</p>
<p>The steps to convert a binary number to decimal is straightforward 📝:</p>
<ol type="1">
<li><p>4️⃣ Find the power of 2 value for each bit of the binary number, starting from 0.(e.g., the power of 2 value for the 5th bit of a binary numberis: 2<sup>5</sup>=32, etc.)</p></li>
<li><p>1️⃣ Add all the powers of two <strong>wherever there is a 1</strong> in the bit of the binary number</p></li>
<li><p>➕ Add those powers of two → this is the decimal!</p></li>
</ol>
<table class="caption-top">
<colgroup>
<col style="width: 46%">
<col style="width: 21%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Binary Number</th>
<th style="text-align: center;">1</th>
<th style="text-align: center;">1</th>
<th style="text-align: center;">0</th>
<th style="text-align: center;">0</th>
<th style="text-align: center;">1</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Step 1: identify each bit</td>
<td style="text-align: center;">4th bit</td>
<td style="text-align: center;">3rd bit</td>
<td style="text-align: center;">2nd bit</td>
<td style="text-align: center;">1st bit</td>
<td style="text-align: center;">0th bit</td>
</tr>
<tr class="even">
<td style="text-align: left;">Step 2: power of 2</td>
<td style="text-align: center;">2<sup>4</sup></td>
<td style="text-align: center;">2<sup>3</sup></td>
<td style="text-align: center;">2<sup>2</sup></td>
<td style="text-align: center;">2<sup>1</sup></td>
<td style="text-align: center;">2<sup>0</sup></td>
</tr>
<tr class="odd">
<td style="text-align: left;">Step 3: include value in sum if it’s a 1.</td>
<td style="text-align: center;">16</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">1</td>
</tr>
<tr class="even">
<td style="text-align: left;">Step 4: Add all terms</td>
<td style="text-align: center;">16 + 8 + 1 = <strong>25</strong></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
</tbody>
</table>
<p>Therefore, <strong>11001<sub>2</sub>=25<sub>10</sub></strong>.</p>
</section>

<section>
<section id="decimal-to-binary-10" class="title-slide slide level1 center scrollable">
<h1>Decimal to Binary 1️⃣0️⃣</h1>
<p>Converting binary to decimal is easy to memorize for small numbers.</p>
<p>For example here is the binary numbers from 0 to 9:</p>
<table class="caption-top">
<thead>
<tr class="header">
<th>Binary</th>
<th>Binary</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0000 0000</td>
<td>1</td>
</tr>
<tr class="even">
<td>0000 0001</td>
<td>2</td>
</tr>
<tr class="odd">
<td>0000 0010</td>
<td>3</td>
</tr>
<tr class="even">
<td>0000 0011</td>
<td>4</td>
</tr>
<tr class="odd">
<td>0000 0100</td>
<td>5</td>
</tr>
<tr class="even">
<td>0000 0101</td>
<td>6</td>
</tr>
<tr class="odd">
<td>0000 0110</td>
<td>7</td>
</tr>
<tr class="even">
<td>0000 0111</td>
<td>8</td>
</tr>
<tr class="odd">
<td>0001 0000</td>
<td>9</td>
</tr>
</tbody>
</table>
<p>What about larger numbers? How can we approach this problem systematically, i.e., use a defined method to confidently get the correct answer every time?</p>
<table class="caption-top">
<thead>
<tr class="header">
<th style="text-align: left;">Binary</th>
<th style="text-align: left;">Decimal</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">1001</td>
<td style="text-align: left;">9</td>
</tr>
<tr class="even">
<td style="text-align: left;">1101101</td>
<td style="text-align: left;">?</td>
</tr>
<tr class="odd">
<td style="text-align: left;">1111111</td>
<td style="text-align: left;">?</td>
</tr>
<tr class="even">
<td style="text-align: left;">100000011000001</td>
<td style="text-align: left;">?</td>
</tr>
</tbody>
</table>
<p>After this lecture, you will have the tools to confidently fill out the rest of this table yourself!</p>
<p>Well, how do we do it for decimals? A large number, like 735, is in fact <strong>the combination of multiples of powers of ten</strong>. When we say these numbers in English, we naturally <strong>decompose</strong> the number into its component parts:</p>

<img data-src="_assets/data-representation9.png" class="r-stretch quarto-figure-center"><p class="caption">Decomposing 735 in powers of 10 Source: <a href="https://cheever.domains.swarthmore.edu/Ref/BinaryMath/NumSys.html">Cheever</a></p><blockquote>
<p>735 is <strong>six hundred + thirty + five.</strong></p>
</blockquote>
<p>Or, in other words:</p>
<blockquote>
<p>735 = 7x100 + 3x10 + 5x1</p>
<p>735 = <strong>7x10<sup>2</sup> +30x10<sup>1</sup> +5x10<sup>0</sup></strong></p>
</blockquote>
<p>We can use this exact method, with one key difference, to decompose the value of binary numbers just like decimal numbers.</p>
<p>What key difference? In Binary, we use <strong>powers of 2 instead of powers of 10</strong>.</p>
<p>We’ll learn an <strong>algorithm</strong> to systematically decompose any decimal number into binary:</p>
<p><strong>Convert Decimal to Binary by Repeated Division</strong></p>
<ol type="1">
<li><p>➗ Divide the decimal number by 2 using long division.</p></li>
<li><p>✍️ Write down the <strong>quotient</strong> and <strong>remainder</strong> of the division on the side.</p></li>
<li><p>🔁 Repeat steps 1 and 2 on the outcome.</p></li>
<li><p>⛔ Stop when the quotient becomes 0.</p></li>
<li><p>📥 Read the remainders from bottom to top → this is the binary number.</p></li>
</ol>
</section>
<section id="example-convert-25-to-binary." class="slide level2">
<h2>Example Convert 25 to binary.</h2>
<p>Long Division (divide the Outcome by 2 at every step): <img data-src="_assets/data-representation7.png"></p>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>Note</strong></p>
</div>
<div class="callout-content">
<p>One way of understanding this algorithm is to apply it to the base 10:</p>
<p><img data-src="_assets/data-representation8.png"></p>
<p>The higher powers are read from bottom to top, because these have been divided repeatedly.</p>
</div>
</div>
</div>
</section>
<section class="slide level2">

</section></section>
<section id="range-of-numbers-based-on-number-of-bits" class="title-slide slide level1 center">
<h1>Range of numbers based on number of bits ↔︎️</h1>
<p>When using a fixed number of bits, the total number of unique values we can represent is always limited by 2<sup>𝑛</sup>, where 𝑛 is the number of bits. This means that no matter how we arrange the bits, once all possible combinations are used, we cannot create any new unique numbers without adding more bits. For example, with 3 bits we can only represent 8 values (0–7 in decimal), and with 8 bits (1 byte) we are restricted to 256 values (0–255). This limitation is why larger data types like 2 bytes (16 bits) or 4 bytes (32 bits) are needed when working with bigger numbers.</p>
<ul>
<li>1 bit -&gt; can represent 2 numbers
<ul>
<li>(0)<sub>2</sub> = (0)<sub>10</sub></li>
<li>(1)<sub>2</sub> = (1)<sub>10</sub></li>
</ul></li>
<li>2 bits -&gt; can represent 4 numbers
<ul>
<li>(00)<sub>2</sub> = (0)<sub>10</sub></li>
<li>(01)<sub>2</sub> = (1)<sub>10</sub></li>
<li>(10)<sub>2</sub> = (2)<sub>10</sub></li>
<li>(11)<sub>2</sub> = (3)<sub>10</sub></li>
<li>Values: 0 to 3 in decimal.</li>
</ul></li>
</ul>
<div class="callout callout-note no-icon callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<p><strong>Question</strong></p>
</div>
<div class="callout-content">
<p>How many numbers can I represent in 4 bytes? What is the first and last number?</p>
<ul>
<li><strong>n bits </strong> → 4</li>
<li><strong>Can represent 2<sup>n</sup></strong>* → 16</li>
<li><strong>Values: from 0 to (2<sup>n</sup> -1)</strong> → 0 to 15</li>
<li><strong>First Number</strong> 0000 = (0)<sub>10</sub></li>
<li><strong>Last Number</strong> 1111 = 16-1 = 15</li>
</ul>
</div>
</div>
</div>
</section>

<section>
<section id="exercises" class="title-slide slide level1 center">
<h1>Exercises</h1>

</section>
<h3 id="practise-problems">Practise problems</h3>
<p>Convert the following binary numbers to decimal using the method above.</p>
<ul>
<li>1001</li>
<li>1101101</li>
<li>1000001</li>
<li>1111111</li>
<li>100000011000001</li>
</ul>
<p>Check your answers (you can google search “1001 binary to decimal” or similar to get an answer)</p>
<h3 id="converting-decimal-to-binary">Converting Decimal to Binary</h3>
<p>Convert the following into binary. <strong>Show your work</strong> .</p>
<p>10</p>
<p>64</p>
<p>128</p>
<p>146</p>
<p>107</p>
<p>300</p>

</section>
    </div>
  <div class="quarto-auto-generated-content" style="display: none;">
<div class="footer footer-default">

</div>
</div></div>

  <script>window.backupDefine = window.define; window.define = undefined;</script>
  <script src="../../site_libs/revealjs/dist/reveal.js"></script>
  <!-- reveal.js plugins -->
  <script src="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.js"></script>
  <script src="../../site_libs/revealjs/plugin/pdf-export/pdfexport.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/quarto-support/support.js"></script>
  

  <script src="../../site_libs/revealjs/plugin/notes/notes.js"></script>
  <script src="../../site_libs/revealjs/plugin/search/search.js"></script>
  <script src="../../site_libs/revealjs/plugin/zoom/zoom.js"></script>
  <script src="../../site_libs/revealjs/plugin/math/math.js"></script>
  <script>window.define = window.backupDefine; window.backupDefine = undefined;</script>

  <script>

      // Full list of configuration options available at:
      // https://revealjs.com/config/
      Reveal.initialize({
'controlsAuto': true,
'previewLinksAuto': false,
'pdfSeparateFragments': false,
'autoAnimateEasing': "ease",
'autoAnimateDuration': 1,
'autoAnimateUnmatched': true,
'jumpToSlide': true,
'menu': {"side":"left","useTextContentForMissingTitles":true,"markers":false,"loadIcons":false,"custom":[{"title":"Tools","icon":"<i class=\"fas fa-gear\"></i>","content":"<ul class=\"slide-menu-items\">\n<li class=\"slide-tool-item active\" data-item=\"0\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.fullscreen(event)\"><kbd>f</kbd> Fullscreen</a></li>\n<li class=\"slide-tool-item\" data-item=\"1\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.speakerMode(event)\"><kbd>s</kbd> Speaker View</a></li>\n<li class=\"slide-tool-item\" data-item=\"2\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.overview(event)\"><kbd>o</kbd> Slide Overview</a></li>\n<li class=\"slide-tool-item\" data-item=\"3\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.togglePdfExport(event)\"><kbd>e</kbd> PDF Export Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"4\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.toggleScrollView(event)\"><kbd>r</kbd> Scroll View Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"5\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.keyboardHelp(event)\"><kbd>?</kbd> Keyboard Help</a></li>\n</ul>"}],"openButton":true},
'smaller': false,
 
        // Display controls in the bottom right corner
        controls: false,

        // Help the user learn the controls by providing hints, for example by
        // bouncing the down arrow when they first encounter a vertical slide
        controlsTutorial: false,

        // Determines where controls appear, "edges" or "bottom-right"
        controlsLayout: 'edges',

        // Visibility rule for backwards navigation arrows; "faded", "hidden"
        // or "visible"
        controlsBackArrows: 'faded',

        // Display a presentation progress bar
        progress: true,

        // Display the page number of the current slide
        slideNumber: false,

        // 'all', 'print', or 'speaker'
        showSlideNumber: 'all',

        // Add the current slide number to the URL hash so that reloading the
        // page/copying the URL will return you to the same slide
        hash: true,

        // Start with 1 for the hash rather than 0
        hashOneBasedIndex: false,

        // Flags if we should monitor the hash and change slides accordingly
        respondToHashChanges: true,

        // Push each slide change to the browser history
        history: true,

        // Enable keyboard shortcuts for navigation
        keyboard: true,

        // Enable the slide overview mode
        overview: true,

        // Disables the default reveal.js slide layout (scaling and centering)
        // so that you can use custom CSS layout
        disableLayout: false,

        // Vertical centering of slides
        center: false,

        // Enables touch navigation on devices with touch input
        touch: true,

        // Loop the presentation
        loop: false,

        // Change the presentation direction to be RTL
        rtl: false,

        // see https://revealjs.com/vertical-slides/#navigation-mode
        navigationMode: 'linear',

        // Randomizes the order of slides each time the presentation loads
        shuffle: false,

        // Turns fragments on and off globally
        fragments: true,

        // Flags whether to include the current fragment in the URL,
        // so that reloading brings you to the same fragment position
        fragmentInURL: false,

        // Flags if the presentation is running in an embedded mode,
        // i.e. contained within a limited portion of the screen
        embedded: false,

        // Flags if we should show a help overlay when the questionmark
        // key is pressed
        help: true,

        // Flags if it should be possible to pause the presentation (blackout)
        pause: true,

        // Flags if speaker notes should be visible to all viewers
        showNotes: false,

        // Global override for autoplaying embedded media (null/true/false)
        autoPlayMedia: null,

        // Global override for preloading lazy-loaded iframes (null/true/false)
        preloadIframes: null,

        // Number of milliseconds between automatically proceeding to the
        // next slide, disabled when set to 0, this value can be overwritten
        // by using a data-autoslide attribute on your slides
        autoSlide: 0,

        // Stop auto-sliding after user input
        autoSlideStoppable: true,

        // Use this method for navigation when auto-sliding
        autoSlideMethod: null,

        // Specify the average time in seconds that you think you will spend
        // presenting each slide. This is used to show a pacing timer in the
        // speaker view
        defaultTiming: null,

        // Enable slide navigation via mouse wheel
        mouseWheel: false,

        // The display mode that will be used to show slides
        display: 'block',

        // Hide cursor if inactive
        hideInactiveCursor: true,

        // Time before the cursor is hidden (in ms)
        hideCursorTime: 5000,

        // Opens links in an iframe preview overlay
        previewLinks: false,

        // Transition style (none/fade/slide/convex/concave/zoom)
        transition: 'slide',

        // Transition speed (default/fast/slow)
        transitionSpeed: 'default',

        // Transition style for full page slide backgrounds
        // (none/fade/slide/convex/concave/zoom)
        backgroundTransition: 'none',

        // Number of slides away from the current that are visible
        viewDistance: 3,

        // Number of slides away from the current that are visible on mobile
        // devices. It is advisable to set this to a lower number than
        // viewDistance in order to save resources.
        mobileViewDistance: 2,

        // The "normal" size of the presentation, aspect ratio will be preserved
        // when the presentation is scaled to fit different resolutions. Can be
        // specified using percentage units.
        width: 1050,

        height: 700,

        // Factor of the display size that should remain empty around the content
        margin: 0.2,

        math: {
          mathjax: 'https://cdn.jsdelivr.net/npm/mathjax@2.7.9/MathJax.js',
          config: 'TeX-AMS_HTML-full',
          tex2jax: {
            inlineMath: [['\\(','\\)']],
            displayMath: [['\\[','\\]']],
            balanceBraces: true,
            processEscapes: false,
            processRefs: true,
            processEnvironments: true,
            preview: 'TeX',
            skipTags: ['script','noscript','style','textarea','pre','code'],
            ignoreClass: 'tex2jax_ignore',
            processClass: 'tex2jax_process'
          },
        },

        // reveal.js plugins
        plugins: [QuartoLineHighlight, PdfExport, RevealMenu, QuartoSupport,

          RevealMath,
          RevealNotes,
          RevealSearch,
          RevealZoom
        ]
      });
    </script>
    <script id="quarto-html-after-body" type="application/javascript">
      window.document.addEventListener("DOMContentLoaded", function (event) {
        const tabsets =  window.document.querySelectorAll(".panel-tabset-tabby")
        tabsets.forEach(function(tabset) {
          const tabby = new Tabby('#' + tabset.id);
        });
        const isCodeAnnotation = (el) => {
          for (const clz of el.classList) {
            if (clz.startsWith('code-annotation-')) {                     
              return true;
            }
          }
          return false;
        }
        const onCopySuccess = function(e) {
          // button target
          const button = e.trigger;
          // don't keep focus
          button.blur();
          // flash "checked"
          button.classList.add('code-copy-button-checked');
          var currentTitle = button.getAttribute("title");
          button.setAttribute("title", "Copied!");
          let tooltip;
          if (window.bootstrap) {
            button.setAttribute("data-bs-toggle", "tooltip");
            button.setAttribute("data-bs-placement", "left");
            button.setAttribute("data-bs-title", "Copied!");
            tooltip = new bootstrap.Tooltip(button, 
              { trigger: "manual", 
                customClass: "code-copy-button-tooltip",
                offset: [0, -8]});
            tooltip.show();    
          }
          setTimeout(function() {
            if (tooltip) {
              tooltip.hide();
              button.removeAttribute("data-bs-title");
              button.removeAttribute("data-bs-toggle");
              button.removeAttribute("data-bs-placement");
            }
            button.setAttribute("title", currentTitle);
            button.classList.remove('code-copy-button-checked');
          }, 1000);
          // clear code selection
          e.clearSelection();
        }
        const getTextToCopy = function(trigger) {
          const outerScaffold = trigger.parentElement.cloneNode(true);
          const codeEl = outerScaffold.querySelector('code');
          for (const childEl of codeEl.children) {
            if (isCodeAnnotation(childEl)) {
              childEl.remove();
            }
          }
          return codeEl.innerText;
        }
        const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
          text: getTextToCopy
        });
        clipboard.on('success', onCopySuccess);
        if (window.document.getElementById('quarto-embedded-source-code-modal')) {
          const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
            text: getTextToCopy,
            container: window.document.getElementById('quarto-embedded-source-code-modal')
          });
          clipboardModal.on('success', onCopySuccess);
        }
          var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
          var mailtoRegex = new RegExp(/^mailto:/);
            var filterRegex = new RegExp("https:\/\/John-Abbott-College\.github\.io\/1N6-Notes\/");
          var isInternal = (href) => {
              return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
          }
          // Inspect non-navigation links and adorn them if external
         var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
          for (var i=0; i<links.length; i++) {
            const link = links[i];
            if (!isInternal(link.href)) {
              // undo the damage that might have been done by quarto-nav.js in the case of
              // links that we want to consider external
              if (link.dataset.originalHref !== undefined) {
                link.href = link.dataset.originalHref;
              }
            }
          }
        function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
          const config = {
            allowHTML: true,
            maxWidth: 500,
            delay: 100,
            arrow: false,
            appendTo: function(el) {
                return el.closest('section.slide') || el.parentElement;
            },
            interactive: true,
            interactiveBorder: 10,
            theme: 'light-border',
            placement: 'bottom-start',
          };
          if (contentFn) {
            config.content = contentFn;
          }
          if (onTriggerFn) {
            config.onTrigger = onTriggerFn;
          }
          if (onUntriggerFn) {
            config.onUntrigger = onUntriggerFn;
          }
            config['offset'] = [0,0];
            config['maxWidth'] = 700;
          window.tippy(el, config); 
        }
        const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
        for (var i=0; i<noterefs.length; i++) {
          const ref = noterefs[i];
          tippyHover(ref, function() {
            // use id or data attribute instead here
            let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
            try { href = new URL(href).hash; } catch {}
            const id = href.replace(/^#\/?/, "");
            const note = window.document.getElementById(id);
            if (note) {
              return note.innerHTML;
            } else {
              return "";
            }
          });
        }
        const findCites = (el) => {
          const parentEl = el.parentElement;
          if (parentEl) {
            const cites = parentEl.dataset.cites;
            if (cites) {
              return {
                el,
                cites: cites.split(' ')
              };
            } else {
              return findCites(el.parentElement)
            }
          } else {
            return undefined;
          }
        };
        var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
        for (var i=0; i<bibliorefs.length; i++) {
          const ref = bibliorefs[i];
          const citeInfo = findCites(ref);
          if (citeInfo) {
            tippyHover(citeInfo.el, function() {
              var popup = window.document.createElement('div');
              citeInfo.cites.forEach(function(cite) {
                var citeDiv = window.document.createElement('div');
                citeDiv.classList.add('hanging-indent');
                citeDiv.classList.add('csl-entry');
                var biblioDiv = window.document.getElementById('ref-' + cite);
                if (biblioDiv) {
                  citeDiv.innerHTML = biblioDiv.innerHTML;
                }
                popup.appendChild(citeDiv);
              });
              return popup.innerHTML;
            });
          }
        }
      });
      </script>
    

</body></html>