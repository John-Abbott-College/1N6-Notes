<!DOCTYPE html>
<html lang="en"><head>
<link href="../../_assets/favicons/favicon.ico" rel="icon">
<script src="../../site_libs/clipboard/clipboard.min.js"></script>
<script src="../../site_libs/quarto-html/tabby.min.js"></script>
<script src="../../site_libs/quarto-html/popper.min.js"></script>
<script src="../../site_libs/quarto-html/tippy.umd.min.js"></script>
<link href="../../site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/light-border.css" rel="stylesheet">
<link href="../../site_libs/quarto-html/quarto-syntax-highlighting-dark-707d8167ce6003fca903bfe2be84ab7f.css" rel="stylesheet" id="quarto-text-highlighting-styles"><meta charset="utf-8">
  <meta name="generator" content="quarto-1.8.25">

  <meta name="dcterms.date" content="2025-09-22">
  <title>{{&lt; var course.title &gt;}} – Logic Gates and Boolean Algebra</title>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reset.css">
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/reveal.css">
  <style>
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
      vertical-align: middle;
    }
  </style>
  <link rel="stylesheet" href="../../site_libs/revealjs/dist/theme/quarto-06e768f098560084c2d7120de8ad04fb.css">
  <link href="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.css" rel="stylesheet">
  <link href="../../site_libs/revealjs/plugin/quarto-support/footer.css" rel="stylesheet">
  <style type="text/css">
    .reveal div.sourceCode {
      margin: 0;
      overflow: auto;
    }
    .reveal div.hanging-indent {
      margin-left: 1em;
      text-indent: -1em;
    }
    .reveal .slide:not(.center) {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide.scrollable {
      overflow-y: auto;
    }
    .reveal .footnotes {
      height: 100%;
      overflow-y: auto;
    }
    .reveal .slide .absolute {
      position: absolute;
      display: block;
    }
    .reveal .footnotes ol {
      counter-reset: ol;
      list-style-type: none; 
      margin-left: 0;
    }
    .reveal .footnotes ol li:before {
      counter-increment: ol;
      content: counter(ol) ". "; 
    }
    .reveal .footnotes ol li > p:first-child {
      display: inline-block;
    }
    .reveal .slide ul,
    .reveal .slide ol {
      margin-bottom: 0.5em;
    }
    .reveal .slide ul li,
    .reveal .slide ol li {
      margin-top: 0.4em;
      margin-bottom: 0.2em;
    }
    .reveal .slide ul[role="tablist"] li {
      margin-bottom: 0;
    }
    .reveal .slide ul li > *:first-child,
    .reveal .slide ol li > *:first-child {
      margin-block-start: 0;
    }
    .reveal .slide ul li > *:last-child,
    .reveal .slide ol li > *:last-child {
      margin-block-end: 0;
    }
    .reveal .slide .columns:nth-child(3) {
      margin-block-start: 0.8em;
    }
    .reveal blockquote {
      box-shadow: none;
    }
    .reveal .tippy-content>* {
      margin-top: 0.2em;
      margin-bottom: 0.7em;
    }
    .reveal .tippy-content>*:last-child {
      margin-bottom: 0.2em;
    }
    .reveal .slide > img.stretch.quarto-figure-center,
    .reveal .slide > img.r-stretch.quarto-figure-center {
      display: block;
      margin-left: auto;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-left,
    .reveal .slide > img.r-stretch.quarto-figure-left  {
      display: block;
      margin-left: 0;
      margin-right: auto; 
    }
    .reveal .slide > img.stretch.quarto-figure-right,
    .reveal .slide > img.r-stretch.quarto-figure-right  {
      display: block;
      margin-left: auto;
      margin-right: 0; 
    }
  </style>
<meta property="og:title" content="Logic Gates and Boolean Algebra – Technical Support">
<meta property="og:description" content="Introduction to AND, OR, NOT, XOR gates.">
<meta property="og:image" content="https://John-Abbott-College.github.io/1N6-Notes/topics/data-representation/_assets/favicons/favicon-32x32.png">
<meta property="og:site_name" content="{{< var course.title >}}">
</head>
<body class="quarto-dark">
  <div class="reveal">
    <div class="slides">

<section id="title-slide" class="quarto-title-block center">
  <h1 class="title">Logic Gates and Boolean Algebra</h1>
  <p class="subtitle">Introduction to AND, OR, NOT, XOR gates.</p>

<div class="quarto-title-authors">
</div>

  <p class="date">2025-09-22</p>
</section><section id="TOC">
<nav role="doc-toc"> 
<h2 id="toc-title">Table of contents</h2>
<ul>
<li><a href="#/introduction" id="/toc-introduction">Introduction</a></li>
<li><a href="#/logic-in-electronics" id="/toc-logic-in-electronics">Logic in electronics</a></li>
<li><a href="#/and-gate" id="/toc-and-gate">AND Gate</a></li>
<li><a href="#/or-gate" id="/toc-or-gate">OR Gate</a></li>
<li><a href="#/not-gate" id="/toc-not-gate">NOT Gate</a></li>
<li><a href="#/xor-gate" id="/toc-xor-gate">XOR Gate</a></li>
<li><a href="#/more-complex-gates" id="/toc-more-complex-gates">More complex gates</a></li>
<li><a href="#/from-logic-circuits-to-cpus" id="/toc-from-logic-circuits-to-cpus">From Logic Circuits to CPUs</a></li>
<li><a href="#/boolean-algebra" id="/toc-boolean-algebra">Boolean Algebra</a></li>
</ul>
</nav>
</section>
<section id="introduction" class="title-slide slide level1 center">
<h1>Introduction</h1>
<p>In 1946, the world’s first programmable electronic computer was created: the <strong>ENIAC</strong> (Electronic Numerical Integrator and Computer). It was a massive machine, filling an entire room with thousands of vacuum tubes, and yet it laid the foundation for every modern computer we use today.</p>
<p>The ENIAC was programmed by a pioneering group of women, including <strong>Betty Jean Jennings</strong> and <strong>Fran Bilas</strong>, at the School of Electrical Engineering. During World War II, these women developed an expertise in programming and operating the machine. Their skills became so valuable that they were difficult to replace, even when soldiers returned from the war.</p>
<p>The ENIAC used vacuum tubes as switches to amplify or switch off the electricity in order to store bits, flip bits, and perform Boolean operations. This allowed the ENIAC to perform basic math and help with calculations.</p>
<p><strong>Logic gates</strong> are the fundamental building blocks of digital circuits. They take simple inputs (like 0s and 1s) and combine them using basic rules (AND, OR, NOT, XOR) to produce outputs. From these simple operations, computers can add numbers, compare values, store information, and eventually run complex software.</p>
<p>By studying logic gates, we connect the concepts seen in binary to <strong>electronic hardware</strong>.</p>
<div class="callout callout-note callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<p><strong>The ENIAC Programmers</strong></p>
</div>
<div class="callout-content">
<dl>
<dt><em>In the early days of computing, there was a job called being a computer, where women, mostly women, some men, would calculate and compute. During World War II, there was a large need for mathematical solutions (…)</em></dt>
<dd>
<p>Megan Smith, U.S. Chief of Technology</p>
</dd>
</dl>
<p><strong>::: {layout-ncol=2}</strong></p>
<p><img data-src="_assets/logic-gates-and-boolean-algebra7.jpg" width="0"></p>
<p><img data-src="_assets/logic-gates-and-boolean-algebra8.jpg" width="0"></p>
</div>
</div>
</div>
</section>

<section>
<section id="logic-in-electronics" class="title-slide slide level1 center">
<h1>Logic in electronics</h1>
<p>Processors work by reacting to an input of 0s and 1s in specific ways and then returning an output based on the decision. The decision itself happens in a circuit called a <strong>logic gate</strong>, each of which requires at least one transistor, with the inputs and outputs arranged differently by different operations. The most elemental electronic component required to make logic circuits are the <strong>transistors</strong> which we discussed in a previous lecture. These three electronic switches were invented in 1947 and revolutionized the computing world by replacing the vacuum tubes with electrical signals.</p>

<img data-src="_assets/logic-gates-and-boolean-algebra10.jpg" class="r-stretch quarto-figure-center"><p class="caption">This is a 2nm IBM wafer containing hundreds if chips which allows 50 billion transistors onto a chip of a fingernail</p><p>The number of transistors in an integrated circuit (IC) has historically doubled about every two years, a trend known as <strong>Moore’s Law</strong>. However, since around 2010, the pace of semiconductor advancement has slowed across the industry. This slowdown is largely due to the <strong>physical limits of transistors</strong>, as they approach sizes so small that further miniaturization becomes increasingly difficult and costly.</p>
<p>[Moore’s Law - The number of transistors on integrated circuit chips (1971-2018)].</p>
</section>
<section id="transistors" class="slide level2">
<h2>Transistors</h2>
<p>A <strong>transistor</strong> is like a tiny switch made from a semiconductor and three parts called the <strong>base, emitter, and collector</strong>. By controlling the base, we can turn the flow of current on or off—just like flipping a light switch. What makes transistors powerful is that they can switch on and off <strong>millions of times per second</strong>. When we connect many transistors together (with other components) to make electronic circuits, they form <strong>logic gates</strong>. The four basic gates you should know:</p>
<ul>
<li><code>OR</code></li>
<li><code>AND</code></li>
<li><code>NOT</code></li>
<li><code>XOR</code> : E<strong>x</strong>clusive <strong>OR</strong></li>
</ul>
<p>You will use those operations frequently in programming! So make sure to pay attention to this part!</p>
<p>When combining these gates (AND, OR, XOR, NOT), computers can make “decisions”, and perform <strong>mathematical operations</strong> like addition or more complex tasks such as multiplexing.</p>

<img data-src="_assets/logic-gates-and-boolean-algebra75.png" class="r-stretch quarto-figure-center"><p class="caption">Transistor details</p><p>Each logic gate will take one or more bits as input and return an output. To describe the behaviour of each we will look at their truth table, which list all the possible outcomes of this gate.</p>
<p>Let’s first understanding them from a conceptual level using simple “True” (1) or “False” (0) statements and watch the output of each gate.</p>
</section></section>
<section>
<section id="and-gate" class="title-slide slide level1 center">
<h1>AND Gate</h1>
<p>An “AND” is a <strong>conjunction</strong> of two inputs. It returns whether both are true <strong>at the same time</strong>.</p>
<p>For example: <em>Shrek is an ogre</em> <em>AND</em> <em>Fiona is a princess</em>, both statements are true, therefore the entire statement is true. If one of them was false, the entire statement is incorrect.</p>
<p>The “AND” gate will return 0 in any other combination. For example:</p>
<p><em>It’s Tuesday today AND it’s raining</em>, if today is really Tuesday but not raining, this statement is false. <strong>Both statements must be correct for the output of the AND gate to be true.</strong></p>
<p><em>It’s Friday today AND it’s the weekend</em>, this statement is false because Friday is a week day, we cannot be on the weekend if today is Friday. The “AND” makes this entire statement false.</p>
</section>
<h3 id="symbol">Symbol</h3>
<p><img data-src="_assets/logic-gates-and-boolean-algebra43.png" height="100"></p>
<h3 id="truth-table">Truth Table</h3>
<p>A truth table lists out all the independent possibilities of inputs and sets the output of a logic circuit. In the case of the AND gate, the logic gate is straightforward, only if the two inputs are at <code>1</code>, the output will be <code>1</code>. All other possibilities are <code>0</code>.</p>
<h3 id="truth-table-1">Truth Table</h3>
<table class="caption-top">
<thead>
<tr class="header">
<th>Input 1</th>
<th>Input 2</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="odd">
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table></section>
<section>
<section id="or-gate" class="title-slide slide level1 center">
<h1>OR Gate</h1>
<p>The “OR” gate is less “strict” than the “AND”, if either of the two inputs or both are true (1), the output is (1). This is what we call a disjunction. Let’s look at an example:</p>
<p><em>To be healthy you must either train OR eat a lot of vegetables</em>.</p>
<p>This statement is true if a person trains without eating vegetables, if a person eats vegetables but doesn’t train, or does both. But it won’t be true if a person doesn’t train and doesn’t eat protein.</p>
</section>
<h3 id="symbol-1">Symbol</h3>
<p>The OR gate has two inputs:</p>
<p><img data-src="_assets/logic-gates-and-boolean-algebra45.png" height="100"></p>
<h3 id="truth-table-2">Truth Table</h3>
<table class="caption-top">
<thead>
<tr class="header">
<th>Input 1</th>
<th>Input 2</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table></section>
<section>
<section id="not-gate" class="title-slide slide level1 center">
<h1>NOT Gate</h1>
<p>The not gate simply inverts a bit and has only one input. If it’s 1 (true), it becomes 0 (false) and vice versa. Here is an example:</p>
<p><em>My automatic LED turns ON, when the ambient light is low and turns OFF when the ambient light is high.</em></p>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="_assets/automatic_light.png"></p>
<figcaption>A picture of my automatic LEDs</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<p><img data-src="_assets/automatic_light_2.png"></p>
</div>
</div>
</div>
</section>
<h3 id="symbol-2">Symbol</h3>
<p>The NOT has only one input:</p>
<p><img data-src="_assets/logic-gates-and-boolean-algebra44.png" height="100"></p>
<h3 id="truth-table-3">Truth Table</h3>
<table class="caption-top">
<thead>
<tr class="header">
<th>Input</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table></section>
<section>
<section id="xor-gate" class="title-slide slide level1 center">
<h1>XOR Gate</h1>
<p>The XOR gate, or exclusive OR takes two inputs and returns <strong>true</strong> only if both inputs are <strong>different</strong>. For example:</p>
<p><em>Today is Tuesday or Thursday</em>, this statement is false if today is neither Tuesday nor Thursday. This statement is false if both are true (because in this case they are <strong>mutually</strong> exclusive). It’s only true if today is really a Tuesday or if it’s a Thursday.</p>
</section>
<h3 id="symbol-3">Symbol</h3>
<p>The XOR has two inputs, in this case A and B:</p>
<p><img data-src="_assets/logic-gates-and-boolean-algebra47.png" height="100"></p>
<h3 id="xor-truth-table">XOR Truth Table</h3>
<table class="caption-top">
<thead>
<tr class="header">
<th>Input 1</th>
<th>Input 2</th>
<th>Output</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table></section>
<section>
<section id="more-complex-gates" class="title-slide slide level1 center">
<h1>More complex gates</h1>
<p>These basic gates can allows us to construct more complex gates that perform more complicated operations. Here are a few examples.</p>
</section>
<h3 id="xor">XOR</h3>
<p>Although presented as a simple gate, the XOR is actually more complex and involves connecting multiple AND, OR and NOT gates together as such:</p>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="_assets/logic-gates-and-boolean-algebra37.png"></p>
<figcaption>XOR made from other basic gates</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-center">
<figure>
<p><img data-src="_assets/logic-gates-and-boolean-algebra38.png"></p>
<figcaption>XOR made from other basic gates</figcaption>
</figure>
</div>
</div>
</div>
</div>
<h3 id="half-adder">Half-Adder</h3>
<p>The half adder is a circuit which adds two bits together and keeps track of the Sum and the Carry (i.e.&nbsp;the new power of 2 that carries over). For example:</p>
<ul>
<li>0 + 0 = 0(Carry) 0 (Sum)</li>
<li>1 + 0 = 0 1</li>
<li>0 + 1 = 0 1</li>
<li>1 + 1 = 1 0</li>
</ul>
<p>The truth table of this gate is:</p>
<table class="caption-top">
<thead>
<tr class="header">
<th>A</th>
<th>B</th>
<th>C</th>
<th>S</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr class="even">
<td>1</td>
<td>0</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="odd">
<td>0</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr class="even">
<td>1</td>
<td>1</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<p>We can achieve this gate by using a XOR gate for the Sum and an AND gate for the Carry.</p>
<p><img data-src="_assets/logic-gates-and-boolean-algebra70.png"></p>
<h3 id="full-adder">Full-Adder</h3>
<p>The problem with the half-adder is that it doesn’t account for the Carry over from a previous addition. As we have seen in class, when adding two binary numbers we start from the lowest powers and keep must track of the carry over power to the next power of 2, and repeat the addition with the higher powers.</p>
<div class="callout callout-note no-icon callout-titled callout-style-default">
<div class="callout-body">
<div class="callout-title">
<p><strong>Challenge</strong></p>
</div>
<div class="callout-content">
<p>How would you design such a gate? It takes three inputs and returns two inputs with the Carry and the Sum.</p>
</div>
</div>
</div></section>
<section id="from-logic-circuits-to-cpus" class="title-slide slide level1 center">
<h1>From Logic Circuits to CPUs</h1>
<p>We will learn very soon, that the CPU is made of a Arithmetic logic unit which is made up entirely from logic circuits such as the ones we have seen so far. The logic circuits of the CPU will determine the bus width of the system (ex: 64-bits).</p>

<img data-src="_assets/logic-gates-and-boolean-algebra74.png" class="r-stretch quarto-figure-center"><p class="caption">This is a 4-bit CPU</p><p>These CPUs are capable of performing the following operations:</p>
<ul>
<li>Add</li>
<li>Add with Carry</li>
<li>Subtract</li>
<li>Subtract with borrow</li>
<li>One’s complement</li>
<li>Two’s complement</li>
<li>Increment</li>
<li>Decrement</li>
<li>Pass through</li>
<li>Logical operations (AND, OR, XOR, NOT)</li>
<li>Bit shift operation</li>
</ul>
</section>

<section id="boolean-algebra" class="title-slide slide level1 center">
<h1>Boolean Algebra</h1>
<p><strong>Integrated circuits (microchips)</strong> are used to store and process information in the form of <strong>bits</strong>. These bits can be manipulated using <strong>Boolean operations</strong>, which are based on <strong>Boolean algebra</strong> named after, named after the mathematician <strong>George Boole</strong>.</p>
<p>In Boolean systems, a variable can take on only two values: <strong>0 (false)</strong> or <strong>1 (true)</strong>. By applying Boolean operations, we can manipulate one or more of these values. Boolean algebra is especially important in the <strong>analysis and synthesis of logical expressions</strong>, making it the foundation for how digital circuits and computers work.</p>


</section>
    </div>
  <div class="quarto-auto-generated-content" style="display: none;">
<div class="footer footer-default">

</div>
</div></div>

  <script>window.backupDefine = window.define; window.define = undefined;</script>
  <script src="../../site_libs/revealjs/dist/reveal.js"></script>
  <!-- reveal.js plugins -->
  <script src="../../site_libs/revealjs/plugin/quarto-line-highlight/line-highlight.js"></script>
  <script src="../../site_libs/revealjs/plugin/pdf-export/pdfexport.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/reveal-menu/quarto-menu.js"></script>
  <script src="../../site_libs/revealjs/plugin/quarto-support/support.js"></script>
  

  <script src="../../site_libs/revealjs/plugin/notes/notes.js"></script>
  <script src="../../site_libs/revealjs/plugin/search/search.js"></script>
  <script src="../../site_libs/revealjs/plugin/zoom/zoom.js"></script>
  <script src="../../site_libs/revealjs/plugin/math/math.js"></script>
  <script>window.define = window.backupDefine; window.backupDefine = undefined;</script>

  <script>

      // Full list of configuration options available at:
      // https://revealjs.com/config/
      Reveal.initialize({
'controlsAuto': true,
'previewLinksAuto': false,
'pdfSeparateFragments': false,
'autoAnimateEasing': "ease",
'autoAnimateDuration': 1,
'autoAnimateUnmatched': true,
'jumpToSlide': true,
'menu': {"side":"left","useTextContentForMissingTitles":true,"markers":false,"loadIcons":false,"custom":[{"title":"Tools","icon":"<i class=\"fas fa-gear\"></i>","content":"<ul class=\"slide-menu-items\">\n<li class=\"slide-tool-item active\" data-item=\"0\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.fullscreen(event)\"><kbd>f</kbd> Fullscreen</a></li>\n<li class=\"slide-tool-item\" data-item=\"1\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.speakerMode(event)\"><kbd>s</kbd> Speaker View</a></li>\n<li class=\"slide-tool-item\" data-item=\"2\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.overview(event)\"><kbd>o</kbd> Slide Overview</a></li>\n<li class=\"slide-tool-item\" data-item=\"3\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.togglePdfExport(event)\"><kbd>e</kbd> PDF Export Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"4\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.toggleScrollView(event)\"><kbd>r</kbd> Scroll View Mode</a></li>\n<li class=\"slide-tool-item\" data-item=\"5\"><a href=\"#\" onclick=\"RevealMenuToolHandlers.keyboardHelp(event)\"><kbd>?</kbd> Keyboard Help</a></li>\n</ul>"}],"openButton":true},
'smaller': false,
 
        // Display controls in the bottom right corner
        controls: false,

        // Help the user learn the controls by providing hints, for example by
        // bouncing the down arrow when they first encounter a vertical slide
        controlsTutorial: false,

        // Determines where controls appear, "edges" or "bottom-right"
        controlsLayout: 'edges',

        // Visibility rule for backwards navigation arrows; "faded", "hidden"
        // or "visible"
        controlsBackArrows: 'faded',

        // Display a presentation progress bar
        progress: true,

        // Display the page number of the current slide
        slideNumber: false,

        // 'all', 'print', or 'speaker'
        showSlideNumber: 'all',

        // Add the current slide number to the URL hash so that reloading the
        // page/copying the URL will return you to the same slide
        hash: true,

        // Start with 1 for the hash rather than 0
        hashOneBasedIndex: false,

        // Flags if we should monitor the hash and change slides accordingly
        respondToHashChanges: true,

        // Push each slide change to the browser history
        history: true,

        // Enable keyboard shortcuts for navigation
        keyboard: true,

        // Enable the slide overview mode
        overview: true,

        // Disables the default reveal.js slide layout (scaling and centering)
        // so that you can use custom CSS layout
        disableLayout: false,

        // Vertical centering of slides
        center: false,

        // Enables touch navigation on devices with touch input
        touch: true,

        // Loop the presentation
        loop: false,

        // Change the presentation direction to be RTL
        rtl: false,

        // see https://revealjs.com/vertical-slides/#navigation-mode
        navigationMode: 'linear',

        // Randomizes the order of slides each time the presentation loads
        shuffle: false,

        // Turns fragments on and off globally
        fragments: true,

        // Flags whether to include the current fragment in the URL,
        // so that reloading brings you to the same fragment position
        fragmentInURL: false,

        // Flags if the presentation is running in an embedded mode,
        // i.e. contained within a limited portion of the screen
        embedded: false,

        // Flags if we should show a help overlay when the questionmark
        // key is pressed
        help: true,

        // Flags if it should be possible to pause the presentation (blackout)
        pause: true,

        // Flags if speaker notes should be visible to all viewers
        showNotes: false,

        // Global override for autoplaying embedded media (null/true/false)
        autoPlayMedia: null,

        // Global override for preloading lazy-loaded iframes (null/true/false)
        preloadIframes: null,

        // Number of milliseconds between automatically proceeding to the
        // next slide, disabled when set to 0, this value can be overwritten
        // by using a data-autoslide attribute on your slides
        autoSlide: 0,

        // Stop auto-sliding after user input
        autoSlideStoppable: true,

        // Use this method for navigation when auto-sliding
        autoSlideMethod: null,

        // Specify the average time in seconds that you think you will spend
        // presenting each slide. This is used to show a pacing timer in the
        // speaker view
        defaultTiming: null,

        // Enable slide navigation via mouse wheel
        mouseWheel: false,

        // The display mode that will be used to show slides
        display: 'block',

        // Hide cursor if inactive
        hideInactiveCursor: true,

        // Time before the cursor is hidden (in ms)
        hideCursorTime: 5000,

        // Opens links in an iframe preview overlay
        previewLinks: false,

        // Transition style (none/fade/slide/convex/concave/zoom)
        transition: 'slide',

        // Transition speed (default/fast/slow)
        transitionSpeed: 'default',

        // Transition style for full page slide backgrounds
        // (none/fade/slide/convex/concave/zoom)
        backgroundTransition: 'none',

        // Number of slides away from the current that are visible
        viewDistance: 3,

        // Number of slides away from the current that are visible on mobile
        // devices. It is advisable to set this to a lower number than
        // viewDistance in order to save resources.
        mobileViewDistance: 2,

        // The "normal" size of the presentation, aspect ratio will be preserved
        // when the presentation is scaled to fit different resolutions. Can be
        // specified using percentage units.
        width: 1050,

        height: 700,

        // Factor of the display size that should remain empty around the content
        margin: 0.2,

        math: {
          mathjax: 'https://cdn.jsdelivr.net/npm/mathjax@2.7.9/MathJax.js',
          config: 'TeX-AMS_HTML-full',
          tex2jax: {
            inlineMath: [['\\(','\\)']],
            displayMath: [['\\[','\\]']],
            balanceBraces: true,
            processEscapes: false,
            processRefs: true,
            processEnvironments: true,
            preview: 'TeX',
            skipTags: ['script','noscript','style','textarea','pre','code'],
            ignoreClass: 'tex2jax_ignore',
            processClass: 'tex2jax_process'
          },
        },

        // reveal.js plugins
        plugins: [QuartoLineHighlight, PdfExport, RevealMenu, QuartoSupport,

          RevealMath,
          RevealNotes,
          RevealSearch,
          RevealZoom
        ]
      });
    </script>
    <script id="quarto-html-after-body" type="application/javascript">
      window.document.addEventListener("DOMContentLoaded", function (event) {
        const tabsets =  window.document.querySelectorAll(".panel-tabset-tabby")
        tabsets.forEach(function(tabset) {
          const tabby = new Tabby('#' + tabset.id);
        });
        const isCodeAnnotation = (el) => {
          for (const clz of el.classList) {
            if (clz.startsWith('code-annotation-')) {                     
              return true;
            }
          }
          return false;
        }
        const onCopySuccess = function(e) {
          // button target
          const button = e.trigger;
          // don't keep focus
          button.blur();
          // flash "checked"
          button.classList.add('code-copy-button-checked');
          var currentTitle = button.getAttribute("title");
          button.setAttribute("title", "Copied!");
          let tooltip;
          if (window.bootstrap) {
            button.setAttribute("data-bs-toggle", "tooltip");
            button.setAttribute("data-bs-placement", "left");
            button.setAttribute("data-bs-title", "Copied!");
            tooltip = new bootstrap.Tooltip(button, 
              { trigger: "manual", 
                customClass: "code-copy-button-tooltip",
                offset: [0, -8]});
            tooltip.show();    
          }
          setTimeout(function() {
            if (tooltip) {
              tooltip.hide();
              button.removeAttribute("data-bs-title");
              button.removeAttribute("data-bs-toggle");
              button.removeAttribute("data-bs-placement");
            }
            button.setAttribute("title", currentTitle);
            button.classList.remove('code-copy-button-checked');
          }, 1000);
          // clear code selection
          e.clearSelection();
        }
        const getTextToCopy = function(trigger) {
          const outerScaffold = trigger.parentElement.cloneNode(true);
          const codeEl = outerScaffold.querySelector('code');
          for (const childEl of codeEl.children) {
            if (isCodeAnnotation(childEl)) {
              childEl.remove();
            }
          }
          return codeEl.innerText;
        }
        const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
          text: getTextToCopy
        });
        clipboard.on('success', onCopySuccess);
        if (window.document.getElementById('quarto-embedded-source-code-modal')) {
          const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
            text: getTextToCopy,
            container: window.document.getElementById('quarto-embedded-source-code-modal')
          });
          clipboardModal.on('success', onCopySuccess);
        }
          var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
          var mailtoRegex = new RegExp(/^mailto:/);
            var filterRegex = new RegExp("https:\/\/John-Abbott-College\.github\.io\/1N6-Notes\/");
          var isInternal = (href) => {
              return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
          }
          // Inspect non-navigation links and adorn them if external
         var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
          for (var i=0; i<links.length; i++) {
            const link = links[i];
            if (!isInternal(link.href)) {
              // undo the damage that might have been done by quarto-nav.js in the case of
              // links that we want to consider external
              if (link.dataset.originalHref !== undefined) {
                link.href = link.dataset.originalHref;
              }
            }
          }
        function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
          const config = {
            allowHTML: true,
            maxWidth: 500,
            delay: 100,
            arrow: false,
            appendTo: function(el) {
                return el.closest('section.slide') || el.parentElement;
            },
            interactive: true,
            interactiveBorder: 10,
            theme: 'light-border',
            placement: 'bottom-start',
          };
          if (contentFn) {
            config.content = contentFn;
          }
          if (onTriggerFn) {
            config.onTrigger = onTriggerFn;
          }
          if (onUntriggerFn) {
            config.onUntrigger = onUntriggerFn;
          }
            config['offset'] = [0,0];
            config['maxWidth'] = 700;
          window.tippy(el, config); 
        }
        const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
        for (var i=0; i<noterefs.length; i++) {
          const ref = noterefs[i];
          tippyHover(ref, function() {
            // use id or data attribute instead here
            let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
            try { href = new URL(href).hash; } catch {}
            const id = href.replace(/^#\/?/, "");
            const note = window.document.getElementById(id);
            if (note) {
              return note.innerHTML;
            } else {
              return "";
            }
          });
        }
        const findCites = (el) => {
          const parentEl = el.parentElement;
          if (parentEl) {
            const cites = parentEl.dataset.cites;
            if (cites) {
              return {
                el,
                cites: cites.split(' ')
              };
            } else {
              return findCites(el.parentElement)
            }
          } else {
            return undefined;
          }
        };
        var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
        for (var i=0; i<bibliorefs.length; i++) {
          const ref = bibliorefs[i];
          const citeInfo = findCites(ref);
          if (citeInfo) {
            tippyHover(citeInfo.el, function() {
              var popup = window.document.createElement('div');
              citeInfo.cites.forEach(function(cite) {
                var citeDiv = window.document.createElement('div');
                citeDiv.classList.add('hanging-indent');
                citeDiv.classList.add('csl-entry');
                var biblioDiv = window.document.getElementById('ref-' + cite);
                if (biblioDiv) {
                  citeDiv.innerHTML = biblioDiv.innerHTML;
                }
                popup.appendChild(citeDiv);
              });
              return popup.innerHTML;
            });
          }
        }
      });
      </script>
    

</body></html>